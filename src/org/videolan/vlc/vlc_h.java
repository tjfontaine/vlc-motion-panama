// Generated by jextract

package org.videolan.vlc;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CSupport.SysV.*;
public final class vlc_h {

    private vlc_h() {}
    public static int VLC_VLC_H() {
        return vlc_h$constants.VLC_VLC_H();
    }
    public static int VLC_LIBVLC_H() {
        return vlc_h$constants.VLC_LIBVLC_H();
    }
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return vlc_h$constants.__DARWIN_ONLY_64_BIT_INO_T();
    }
    public static int __DARWIN_ONLY_VERS_1050() {
        return vlc_h$constants.__DARWIN_ONLY_VERS_1050();
    }
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return vlc_h$constants.__DARWIN_ONLY_UNIX_CONFORMANCE();
    }
    public static int __DARWIN_UNIX03() {
        return vlc_h$constants.__DARWIN_UNIX03();
    }
    public static int __DARWIN_64_BIT_INO_T() {
        return vlc_h$constants.__DARWIN_64_BIT_INO_T();
    }
    public static int __DARWIN_VERS_1050() {
        return vlc_h$constants.__DARWIN_VERS_1050();
    }
    public static int __DARWIN_NON_CANCELABLE() {
        return vlc_h$constants.__DARWIN_NON_CANCELABLE();
    }
    public static MemoryAddress __DARWIN_SUF_64_BIT_INO_T() {
        return vlc_h$constants.__DARWIN_SUF_64_BIT_INO_T();
    }
    public static MemoryAddress __DARWIN_SUF_1050() {
        return vlc_h$constants.__DARWIN_SUF_1050();
    }
    public static MemoryAddress __DARWIN_SUF_EXTSN() {
        return vlc_h$constants.__DARWIN_SUF_EXTSN();
    }
    public static long __DARWIN_C_ANSI() {
        return vlc_h$constants.__DARWIN_C_ANSI();
    }
    public static long __DARWIN_C_FULL() {
        return vlc_h$constants.__DARWIN_C_FULL();
    }
    public static long __DARWIN_C_LEVEL() {
        return vlc_h$constants.__DARWIN_C_LEVEL();
    }
    public static int __STDC_WANT_LIB_EXT1__() {
        return vlc_h$constants.__STDC_WANT_LIB_EXT1__();
    }
    public static int __DARWIN_NO_LONG_LONG() {
        return vlc_h$constants.__DARWIN_NO_LONG_LONG();
    }
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return vlc_h$constants._DARWIN_FEATURE_64_BIT_INODE();
    }
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return vlc_h$constants._DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE();
    }
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return vlc_h$constants._DARWIN_FEATURE_UNIX_CONFORMANCE();
    }
    public static int __API_TO_BE_DEPRECATED() {
        return vlc_h$constants.__API_TO_BE_DEPRECATED();
    }
    public static int __MAC_10_0() {
        return vlc_h$constants.__MAC_10_0();
    }
    public static int __MAC_10_1() {
        return vlc_h$constants.__MAC_10_1();
    }
    public static int __MAC_10_2() {
        return vlc_h$constants.__MAC_10_2();
    }
    public static int __MAC_10_3() {
        return vlc_h$constants.__MAC_10_3();
    }
    public static int __MAC_10_4() {
        return vlc_h$constants.__MAC_10_4();
    }
    public static int __MAC_10_5() {
        return vlc_h$constants.__MAC_10_5();
    }
    public static int __MAC_10_6() {
        return vlc_h$constants.__MAC_10_6();
    }
    public static int __MAC_10_7() {
        return vlc_h$constants.__MAC_10_7();
    }
    public static int __MAC_10_8() {
        return vlc_h$constants.__MAC_10_8();
    }
    public static int __MAC_10_9() {
        return vlc_h$constants.__MAC_10_9();
    }
    public static int __MAC_10_10() {
        return vlc_h$constants.__MAC_10_10();
    }
    public static int __MAC_10_10_2() {
        return vlc_h$constants.__MAC_10_10_2();
    }
    public static int __MAC_10_10_3() {
        return vlc_h$constants.__MAC_10_10_3();
    }
    public static int __MAC_10_11() {
        return vlc_h$constants.__MAC_10_11();
    }
    public static int __MAC_10_11_2() {
        return vlc_h$constants.__MAC_10_11_2();
    }
    public static int __MAC_10_11_3() {
        return vlc_h$constants.__MAC_10_11_3();
    }
    public static int __MAC_10_11_4() {
        return vlc_h$constants.__MAC_10_11_4();
    }
    public static int __MAC_10_12() {
        return vlc_h$constants.__MAC_10_12();
    }
    public static int __MAC_10_12_1() {
        return vlc_h$constants.__MAC_10_12_1();
    }
    public static int __MAC_10_12_2() {
        return vlc_h$constants.__MAC_10_12_2();
    }
    public static int __MAC_10_12_4() {
        return vlc_h$constants.__MAC_10_12_4();
    }
    public static int __MAC_10_13() {
        return vlc_h$constants.__MAC_10_13();
    }
    public static int __MAC_10_13_1() {
        return vlc_h$constants.__MAC_10_13_1();
    }
    public static int __MAC_10_13_2() {
        return vlc_h$constants.__MAC_10_13_2();
    }
    public static int __MAC_10_13_4() {
        return vlc_h$constants.__MAC_10_13_4();
    }
    public static int __MAC_10_14() {
        return vlc_h$constants.__MAC_10_14();
    }
    public static int __MAC_10_14_1() {
        return vlc_h$constants.__MAC_10_14_1();
    }
    public static int __MAC_10_14_4() {
        return vlc_h$constants.__MAC_10_14_4();
    }
    public static int __MAC_10_15() {
        return vlc_h$constants.__MAC_10_15();
    }
    public static int __MAC_10_15_1() {
        return vlc_h$constants.__MAC_10_15_1();
    }
    public static int __MAC_10_15_4() {
        return vlc_h$constants.__MAC_10_15_4();
    }
    public static int __IPHONE_2_0() {
        return vlc_h$constants.__IPHONE_2_0();
    }
    public static int __IPHONE_2_1() {
        return vlc_h$constants.__IPHONE_2_1();
    }
    public static int __IPHONE_2_2() {
        return vlc_h$constants.__IPHONE_2_2();
    }
    public static int __IPHONE_3_0() {
        return vlc_h$constants.__IPHONE_3_0();
    }
    public static int __IPHONE_3_1() {
        return vlc_h$constants.__IPHONE_3_1();
    }
    public static int __IPHONE_3_2() {
        return vlc_h$constants.__IPHONE_3_2();
    }
    public static int __IPHONE_4_0() {
        return vlc_h$constants.__IPHONE_4_0();
    }
    public static int __IPHONE_4_1() {
        return vlc_h$constants.__IPHONE_4_1();
    }
    public static int __IPHONE_4_2() {
        return vlc_h$constants.__IPHONE_4_2();
    }
    public static int __IPHONE_4_3() {
        return vlc_h$constants.__IPHONE_4_3();
    }
    public static int __IPHONE_5_0() {
        return vlc_h$constants.__IPHONE_5_0();
    }
    public static int __IPHONE_5_1() {
        return vlc_h$constants.__IPHONE_5_1();
    }
    public static int __IPHONE_6_0() {
        return vlc_h$constants.__IPHONE_6_0();
    }
    public static int __IPHONE_6_1() {
        return vlc_h$constants.__IPHONE_6_1();
    }
    public static int __IPHONE_7_0() {
        return vlc_h$constants.__IPHONE_7_0();
    }
    public static int __IPHONE_7_1() {
        return vlc_h$constants.__IPHONE_7_1();
    }
    public static int __IPHONE_8_0() {
        return vlc_h$constants.__IPHONE_8_0();
    }
    public static int __IPHONE_8_1() {
        return vlc_h$constants.__IPHONE_8_1();
    }
    public static int __IPHONE_8_2() {
        return vlc_h$constants.__IPHONE_8_2();
    }
    public static int __IPHONE_8_3() {
        return vlc_h$constants.__IPHONE_8_3();
    }
    public static int __IPHONE_8_4() {
        return vlc_h$constants.__IPHONE_8_4();
    }
    public static int __IPHONE_9_0() {
        return vlc_h$constants.__IPHONE_9_0();
    }
    public static int __IPHONE_9_1() {
        return vlc_h$constants.__IPHONE_9_1();
    }
    public static int __IPHONE_9_2() {
        return vlc_h$constants.__IPHONE_9_2();
    }
    public static int __IPHONE_9_3() {
        return vlc_h$constants.__IPHONE_9_3();
    }
    public static int __IPHONE_10_0() {
        return vlc_h$constants.__IPHONE_10_0();
    }
    public static int __IPHONE_10_1() {
        return vlc_h$constants.__IPHONE_10_1();
    }
    public static int __IPHONE_10_2() {
        return vlc_h$constants.__IPHONE_10_2();
    }
    public static int __IPHONE_10_3() {
        return vlc_h$constants.__IPHONE_10_3();
    }
    public static int __IPHONE_11_0() {
        return vlc_h$constants.__IPHONE_11_0();
    }
    public static int __IPHONE_11_1() {
        return vlc_h$constants.__IPHONE_11_1();
    }
    public static int __IPHONE_11_2() {
        return vlc_h$constants.__IPHONE_11_2();
    }
    public static int __IPHONE_11_3() {
        return vlc_h$constants.__IPHONE_11_3();
    }
    public static int __IPHONE_11_4() {
        return vlc_h$constants.__IPHONE_11_4();
    }
    public static int __IPHONE_12_0() {
        return vlc_h$constants.__IPHONE_12_0();
    }
    public static int __IPHONE_12_1() {
        return vlc_h$constants.__IPHONE_12_1();
    }
    public static int __IPHONE_12_2() {
        return vlc_h$constants.__IPHONE_12_2();
    }
    public static int __IPHONE_12_3() {
        return vlc_h$constants.__IPHONE_12_3();
    }
    public static int __IPHONE_13_0() {
        return vlc_h$constants.__IPHONE_13_0();
    }
    public static int __IPHONE_13_1() {
        return vlc_h$constants.__IPHONE_13_1();
    }
    public static int __IPHONE_13_2() {
        return vlc_h$constants.__IPHONE_13_2();
    }
    public static int __IPHONE_13_3() {
        return vlc_h$constants.__IPHONE_13_3();
    }
    public static int __IPHONE_13_4() {
        return vlc_h$constants.__IPHONE_13_4();
    }
    public static int __TVOS_9_0() {
        return vlc_h$constants.__TVOS_9_0();
    }
    public static int __TVOS_9_1() {
        return vlc_h$constants.__TVOS_9_1();
    }
    public static int __TVOS_9_2() {
        return vlc_h$constants.__TVOS_9_2();
    }
    public static int __TVOS_10_0() {
        return vlc_h$constants.__TVOS_10_0();
    }
    public static int __TVOS_10_0_1() {
        return vlc_h$constants.__TVOS_10_0_1();
    }
    public static int __TVOS_10_1() {
        return vlc_h$constants.__TVOS_10_1();
    }
    public static int __TVOS_10_2() {
        return vlc_h$constants.__TVOS_10_2();
    }
    public static int __TVOS_11_0() {
        return vlc_h$constants.__TVOS_11_0();
    }
    public static int __TVOS_11_1() {
        return vlc_h$constants.__TVOS_11_1();
    }
    public static int __TVOS_11_2() {
        return vlc_h$constants.__TVOS_11_2();
    }
    public static int __TVOS_11_3() {
        return vlc_h$constants.__TVOS_11_3();
    }
    public static int __TVOS_11_4() {
        return vlc_h$constants.__TVOS_11_4();
    }
    public static int __TVOS_12_0() {
        return vlc_h$constants.__TVOS_12_0();
    }
    public static int __TVOS_12_1() {
        return vlc_h$constants.__TVOS_12_1();
    }
    public static int __TVOS_12_2() {
        return vlc_h$constants.__TVOS_12_2();
    }
    public static int __TVOS_12_3() {
        return vlc_h$constants.__TVOS_12_3();
    }
    public static int __TVOS_13_0() {
        return vlc_h$constants.__TVOS_13_0();
    }
    public static int __TVOS_13_2() {
        return vlc_h$constants.__TVOS_13_2();
    }
    public static int __TVOS_13_3() {
        return vlc_h$constants.__TVOS_13_3();
    }
    public static int __TVOS_13_4() {
        return vlc_h$constants.__TVOS_13_4();
    }
    public static int __WATCHOS_1_0() {
        return vlc_h$constants.__WATCHOS_1_0();
    }
    public static int __WATCHOS_2_0() {
        return vlc_h$constants.__WATCHOS_2_0();
    }
    public static int __WATCHOS_2_1() {
        return vlc_h$constants.__WATCHOS_2_1();
    }
    public static int __WATCHOS_2_2() {
        return vlc_h$constants.__WATCHOS_2_2();
    }
    public static int __WATCHOS_3_0() {
        return vlc_h$constants.__WATCHOS_3_0();
    }
    public static int __WATCHOS_3_1() {
        return vlc_h$constants.__WATCHOS_3_1();
    }
    public static int __WATCHOS_3_1_1() {
        return vlc_h$constants.__WATCHOS_3_1_1();
    }
    public static int __WATCHOS_3_2() {
        return vlc_h$constants.__WATCHOS_3_2();
    }
    public static int __WATCHOS_4_0() {
        return vlc_h$constants.__WATCHOS_4_0();
    }
    public static int __WATCHOS_4_1() {
        return vlc_h$constants.__WATCHOS_4_1();
    }
    public static int __WATCHOS_4_2() {
        return vlc_h$constants.__WATCHOS_4_2();
    }
    public static int __WATCHOS_4_3() {
        return vlc_h$constants.__WATCHOS_4_3();
    }
    public static int __WATCHOS_5_0() {
        return vlc_h$constants.__WATCHOS_5_0();
    }
    public static int __WATCHOS_5_1() {
        return vlc_h$constants.__WATCHOS_5_1();
    }
    public static int __WATCHOS_5_2() {
        return vlc_h$constants.__WATCHOS_5_2();
    }
    public static int __WATCHOS_6_0() {
        return vlc_h$constants.__WATCHOS_6_0();
    }
    public static int __WATCHOS_6_1() {
        return vlc_h$constants.__WATCHOS_6_1();
    }
    public static int __WATCHOS_6_2() {
        return vlc_h$constants.__WATCHOS_6_2();
    }
    public static int __DRIVERKIT_19_0() {
        return vlc_h$constants.__DRIVERKIT_19_0();
    }
    public static int __MAC_OS_X_VERSION_MIN_REQUIRED() {
        return vlc_h$constants.__MAC_OS_X_VERSION_MIN_REQUIRED();
    }
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return vlc_h$constants.__MAC_OS_X_VERSION_MAX_ALLOWED();
    }
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return vlc_h$constants.__ENABLE_LEGACY_MAC_AVAILABILITY();
    }
    public static MemoryAddress __DARWIN_NULL() {
        return vlc_h$constants.__DARWIN_NULL();
    }
    public static int __PTHREAD_SIZE__() {
        return vlc_h$constants.__PTHREAD_SIZE__();
    }
    public static int __PTHREAD_ATTR_SIZE__() {
        return vlc_h$constants.__PTHREAD_ATTR_SIZE__();
    }
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return vlc_h$constants.__PTHREAD_MUTEXATTR_SIZE__();
    }
    public static int __PTHREAD_MUTEX_SIZE__() {
        return vlc_h$constants.__PTHREAD_MUTEX_SIZE__();
    }
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return vlc_h$constants.__PTHREAD_CONDATTR_SIZE__();
    }
    public static int __PTHREAD_COND_SIZE__() {
        return vlc_h$constants.__PTHREAD_COND_SIZE__();
    }
    public static int __PTHREAD_ONCE_SIZE__() {
        return vlc_h$constants.__PTHREAD_ONCE_SIZE__();
    }
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return vlc_h$constants.__PTHREAD_RWLOCK_SIZE__();
    }
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return vlc_h$constants.__PTHREAD_RWLOCKATTR_SIZE__();
    }
    public static int __DARWIN_WCHAR_MAX() {
        return vlc_h$constants.__DARWIN_WCHAR_MAX();
    }
    public static int __DARWIN_WCHAR_MIN() {
        return vlc_h$constants.__DARWIN_WCHAR_MIN();
    }
    public static int __DARWIN_WEOF() {
        return vlc_h$constants.__DARWIN_WEOF();
    }
    public static int _FORTIFY_SOURCE() {
        return vlc_h$constants._FORTIFY_SOURCE();
    }
    public static long USER_ADDR_NULL() {
        return vlc_h$constants.USER_ADDR_NULL();
    }
    public static MemoryAddress NULL() {
        return vlc_h$constants.NULL();
    }
    public static int RENAME_SECLUDE() {
        return vlc_h$constants.RENAME_SECLUDE();
    }
    public static int RENAME_SWAP() {
        return vlc_h$constants.RENAME_SWAP();
    }
    public static int RENAME_EXCL() {
        return vlc_h$constants.RENAME_EXCL();
    }
    public static int __SLBF() {
        return vlc_h$constants.__SLBF();
    }
    public static int __SNBF() {
        return vlc_h$constants.__SNBF();
    }
    public static int __SRD() {
        return vlc_h$constants.__SRD();
    }
    public static int __SWR() {
        return vlc_h$constants.__SWR();
    }
    public static int __SRW() {
        return vlc_h$constants.__SRW();
    }
    public static int __SEOF() {
        return vlc_h$constants.__SEOF();
    }
    public static int __SERR() {
        return vlc_h$constants.__SERR();
    }
    public static int __SMBF() {
        return vlc_h$constants.__SMBF();
    }
    public static int __SAPP() {
        return vlc_h$constants.__SAPP();
    }
    public static int __SSTR() {
        return vlc_h$constants.__SSTR();
    }
    public static int __SOPT() {
        return vlc_h$constants.__SOPT();
    }
    public static int __SNPT() {
        return vlc_h$constants.__SNPT();
    }
    public static int __SOFF() {
        return vlc_h$constants.__SOFF();
    }
    public static int __SMOD() {
        return vlc_h$constants.__SMOD();
    }
    public static int __SALC() {
        return vlc_h$constants.__SALC();
    }
    public static int __SIGN() {
        return vlc_h$constants.__SIGN();
    }
    public static int _IOFBF() {
        return vlc_h$constants._IOFBF();
    }
    public static int _IOLBF() {
        return vlc_h$constants._IOLBF();
    }
    public static int _IONBF() {
        return vlc_h$constants._IONBF();
    }
    public static int BUFSIZ() {
        return vlc_h$constants.BUFSIZ();
    }
    public static int EOF() {
        return vlc_h$constants.EOF();
    }
    public static int FOPEN_MAX() {
        return vlc_h$constants.FOPEN_MAX();
    }
    public static int FILENAME_MAX() {
        return vlc_h$constants.FILENAME_MAX();
    }
    public static MemoryAddress P_tmpdir() {
        return vlc_h$constants.P_tmpdir();
    }
    public static int L_tmpnam() {
        return vlc_h$constants.L_tmpnam();
    }
    public static int TMP_MAX() {
        return vlc_h$constants.TMP_MAX();
    }
    public static int SEEK_SET() {
        return vlc_h$constants.SEEK_SET();
    }
    public static int SEEK_CUR() {
        return vlc_h$constants.SEEK_CUR();
    }
    public static int SEEK_END() {
        return vlc_h$constants.SEEK_END();
    }
    public static int L_ctermid() {
        return vlc_h$constants.L_ctermid();
    }
    public static int _USE_FORTIFY_LEVEL() {
        return vlc_h$constants._USE_FORTIFY_LEVEL();
    }
    public static int __GNUC_VA_LIST() {
        return vlc_h$constants.__GNUC_VA_LIST();
    }
    public static int __WORDSIZE() {
        return vlc_h$constants.__WORDSIZE();
    }
    public static int INT8_MAX() {
        return vlc_h$constants.INT8_MAX();
    }
    public static int INT16_MAX() {
        return vlc_h$constants.INT16_MAX();
    }
    public static int INT32_MAX() {
        return vlc_h$constants.INT32_MAX();
    }
    public static long INT64_MAX() {
        return vlc_h$constants.INT64_MAX();
    }
    public static int INT8_MIN() {
        return vlc_h$constants.INT8_MIN();
    }
    public static int INT16_MIN() {
        return vlc_h$constants.INT16_MIN();
    }
    public static int INT32_MIN() {
        return vlc_h$constants.INT32_MIN();
    }
    public static long INT64_MIN() {
        return vlc_h$constants.INT64_MIN();
    }
    public static int UINT8_MAX() {
        return vlc_h$constants.UINT8_MAX();
    }
    public static int UINT16_MAX() {
        return vlc_h$constants.UINT16_MAX();
    }
    public static int UINT32_MAX() {
        return vlc_h$constants.UINT32_MAX();
    }
    public static long UINT64_MAX() {
        return vlc_h$constants.UINT64_MAX();
    }
    public static int INT_LEAST8_MIN() {
        return vlc_h$constants.INT_LEAST8_MIN();
    }
    public static int INT_LEAST16_MIN() {
        return vlc_h$constants.INT_LEAST16_MIN();
    }
    public static int INT_LEAST32_MIN() {
        return vlc_h$constants.INT_LEAST32_MIN();
    }
    public static long INT_LEAST64_MIN() {
        return vlc_h$constants.INT_LEAST64_MIN();
    }
    public static int INT_LEAST8_MAX() {
        return vlc_h$constants.INT_LEAST8_MAX();
    }
    public static int INT_LEAST16_MAX() {
        return vlc_h$constants.INT_LEAST16_MAX();
    }
    public static int INT_LEAST32_MAX() {
        return vlc_h$constants.INT_LEAST32_MAX();
    }
    public static long INT_LEAST64_MAX() {
        return vlc_h$constants.INT_LEAST64_MAX();
    }
    public static int UINT_LEAST8_MAX() {
        return vlc_h$constants.UINT_LEAST8_MAX();
    }
    public static int UINT_LEAST16_MAX() {
        return vlc_h$constants.UINT_LEAST16_MAX();
    }
    public static int UINT_LEAST32_MAX() {
        return vlc_h$constants.UINT_LEAST32_MAX();
    }
    public static long UINT_LEAST64_MAX() {
        return vlc_h$constants.UINT_LEAST64_MAX();
    }
    public static int INT_FAST8_MIN() {
        return vlc_h$constants.INT_FAST8_MIN();
    }
    public static int INT_FAST16_MIN() {
        return vlc_h$constants.INT_FAST16_MIN();
    }
    public static int INT_FAST32_MIN() {
        return vlc_h$constants.INT_FAST32_MIN();
    }
    public static long INT_FAST64_MIN() {
        return vlc_h$constants.INT_FAST64_MIN();
    }
    public static int INT_FAST8_MAX() {
        return vlc_h$constants.INT_FAST8_MAX();
    }
    public static int INT_FAST16_MAX() {
        return vlc_h$constants.INT_FAST16_MAX();
    }
    public static int INT_FAST32_MAX() {
        return vlc_h$constants.INT_FAST32_MAX();
    }
    public static long INT_FAST64_MAX() {
        return vlc_h$constants.INT_FAST64_MAX();
    }
    public static int UINT_FAST8_MAX() {
        return vlc_h$constants.UINT_FAST8_MAX();
    }
    public static int UINT_FAST16_MAX() {
        return vlc_h$constants.UINT_FAST16_MAX();
    }
    public static int UINT_FAST32_MAX() {
        return vlc_h$constants.UINT_FAST32_MAX();
    }
    public static long UINT_FAST64_MAX() {
        return vlc_h$constants.UINT_FAST64_MAX();
    }
    public static long INTPTR_MAX() {
        return vlc_h$constants.INTPTR_MAX();
    }
    public static long INTPTR_MIN() {
        return vlc_h$constants.INTPTR_MIN();
    }
    public static long UINTPTR_MAX() {
        return vlc_h$constants.UINTPTR_MAX();
    }
    public static long INTMAX_MAX() {
        return vlc_h$constants.INTMAX_MAX();
    }
    public static long UINTMAX_MAX() {
        return vlc_h$constants.UINTMAX_MAX();
    }
    public static long INTMAX_MIN() {
        return vlc_h$constants.INTMAX_MIN();
    }
    public static long PTRDIFF_MIN() {
        return vlc_h$constants.PTRDIFF_MIN();
    }
    public static long PTRDIFF_MAX() {
        return vlc_h$constants.PTRDIFF_MAX();
    }
    public static long SIZE_MAX() {
        return vlc_h$constants.SIZE_MAX();
    }
    public static long RSIZE_MAX() {
        return vlc_h$constants.RSIZE_MAX();
    }
    public static int WCHAR_MAX() {
        return vlc_h$constants.WCHAR_MAX();
    }
    public static int WCHAR_MIN() {
        return vlc_h$constants.WCHAR_MIN();
    }
    public static int WINT_MIN() {
        return vlc_h$constants.WINT_MIN();
    }
    public static int WINT_MAX() {
        return vlc_h$constants.WINT_MAX();
    }
    public static int SIG_ATOMIC_MIN() {
        return vlc_h$constants.SIG_ATOMIC_MIN();
    }
    public static int SIG_ATOMIC_MAX() {
        return vlc_h$constants.SIG_ATOMIC_MAX();
    }
    public static int VLC_LIBVLC_RENDERER_DISCOVERER_H() {
        return vlc_h$constants.VLC_LIBVLC_RENDERER_DISCOVERER_H();
    }
    public static int LIBVLC_RENDERER_CAN_AUDIO() {
        return vlc_h$constants.LIBVLC_RENDERER_CAN_AUDIO();
    }
    public static int LIBVLC_RENDERER_CAN_VIDEO() {
        return vlc_h$constants.LIBVLC_RENDERER_CAN_VIDEO();
    }
    public static int VLC_LIBVLC_MEDIA_H() {
        return vlc_h$constants.VLC_LIBVLC_MEDIA_H();
    }
    public static int VLC_LIBVLC_MEDIA_PLAYER_H() {
        return vlc_h$constants.VLC_LIBVLC_MEDIA_PLAYER_H();
    }
    public static int true_() {
        return vlc_h$constants.true_();
    }
    public static int false_() {
        return vlc_h$constants.false_();
    }
    public static int __bool_true_false_are_defined() {
        return vlc_h$constants.__bool_true_false_are_defined();
    }
    public static int libvlc_role_Last() {
        return vlc_h$constants.libvlc_role_Last();
    }
    public static int LIBVLC_MEDIA_LIST_H() {
        return vlc_h$constants.LIBVLC_MEDIA_LIST_H();
    }
    public static int LIBVLC_MEDIA_LIST_PLAYER_H() {
        return vlc_h$constants.LIBVLC_MEDIA_LIST_PLAYER_H();
    }
    public static int VLC_LIBVLC_MEDIA_LIBRARY_H() {
        return vlc_h$constants.VLC_LIBVLC_MEDIA_LIBRARY_H();
    }
    public static int VLC_LIBVLC_MEDIA_DISCOVERER_H() {
        return vlc_h$constants.VLC_LIBVLC_MEDIA_DISCOVERER_H();
    }
    public static int LIBVLC_EVENTS_H() {
        return vlc_h$constants.LIBVLC_EVENTS_H();
    }
    public static int LIBVLC_DIALOG_H() {
        return vlc_h$constants.LIBVLC_DIALOG_H();
    }
    public static int LIBVLC_VLM_H() {
        return vlc_h$constants.LIBVLC_VLM_H();
    }
    public static int LIBVLC_DEPRECATED_H() {
        return vlc_h$constants.LIBVLC_DEPRECATED_H();
    }
    public static class C__int16_t extends Cshort {
        private C__int16_t() {}
    }
    public static class C__int32_t extends Cint {
        private C__int32_t() {}
    }
    public static class C__int64_t extends Clong_long {
        private C__int64_t() {}
    }
    public static class C__darwin_intptr_t extends Clong {
        private C__darwin_intptr_t() {}
    }
    public static class C__darwin_ct_rune_t extends Cint {
        private C__darwin_ct_rune_t() {}
    }
    public static class C__darwin_ptrdiff_t extends Clong {
        private C__darwin_ptrdiff_t() {}
    }
    public static class C__darwin_wchar_t extends Cint {
        private C__darwin_wchar_t() {}
    }
    public static class C__darwin_rune_t extends Cint {
        private C__darwin_rune_t() {}
    }
    public static class C__darwin_wint_t extends Cint {
        private C__darwin_wint_t() {}
    }
    public static class C__darwin_ssize_t extends Clong {
        private C__darwin_ssize_t() {}
    }
    public static class C__darwin_time_t extends Clong {
        private C__darwin_time_t() {}
    }
    public static class C__darwin_blkcnt_t extends Clong_long {
        private C__darwin_blkcnt_t() {}
    }
    public static class C__darwin_blksize_t extends Cint {
        private C__darwin_blksize_t() {}
    }
    public static class C__darwin_dev_t extends Cint {
        private C__darwin_dev_t() {}
    }
    public static class C__darwin_off_t extends Clong_long {
        private C__darwin_off_t() {}
    }
    public static class C__darwin_pid_t extends Cint {
        private C__darwin_pid_t() {}
    }
    public static class C__darwin_suseconds_t extends Cint {
        private C__darwin_suseconds_t() {}
    }
    public static class C__darwin_pthread_attr_t extends C_opaque_pthread_attr_t {
        private C__darwin_pthread_attr_t() {}
    }
    public static class C__darwin_pthread_cond_t extends C_opaque_pthread_cond_t {
        private C__darwin_pthread_cond_t() {}
    }
    public static class C__darwin_pthread_condattr_t extends C_opaque_pthread_condattr_t {
        private C__darwin_pthread_condattr_t() {}
    }
    public static class C__darwin_pthread_mutex_t extends C_opaque_pthread_mutex_t {
        private C__darwin_pthread_mutex_t() {}
    }
    public static class C__darwin_pthread_mutexattr_t extends C_opaque_pthread_mutexattr_t {
        private C__darwin_pthread_mutexattr_t() {}
    }
    public static class C__darwin_pthread_once_t extends C_opaque_pthread_once_t {
        private C__darwin_pthread_once_t() {}
    }
    public static class C__darwin_pthread_rwlock_t extends C_opaque_pthread_rwlock_t {
        private C__darwin_pthread_rwlock_t() {}
    }
    public static class C__darwin_pthread_rwlockattr_t extends C_opaque_pthread_rwlockattr_t {
        private C__darwin_pthread_rwlockattr_t() {}
    }
    public static class C__darwin_nl_item extends Cint {
        private C__darwin_nl_item() {}
    }
    public static class C__darwin_wctrans_t extends Cint {
        private C__darwin_wctrans_t() {}
    }
    public static class Cint16_t extends Cshort {
        private Cint16_t() {}
    }
    public static class Cint32_t extends Cint {
        private Cint32_t() {}
    }
    public static class Cint64_t extends Clong_long {
        private Cint64_t() {}
    }
    public static class Cregister_t extends Clong_long {
        private Cregister_t() {}
    }
    public static class Cintptr_t extends Clong {
        private Cintptr_t() {}
    }
    public static class Cuser_ssize_t extends Clong_long {
        private Cuser_ssize_t() {}
    }
    public static class Cuser_long_t extends Clong_long {
        private Cuser_long_t() {}
    }
    public static class Cuser_time_t extends Clong_long {
        private Cuser_time_t() {}
    }
    public static class Cuser_off_t extends Clong_long {
        private Cuser_off_t() {}
    }
    public static MethodHandle renameat$MH() {
        return vlc_h$constants.renameat$MH();
    }
    public static int renameat (int x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3) {
        try {
            return (int)vlc_h$constants.renameat$MH().invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle renamex_np$MH() {
        return vlc_h$constants.renamex_np$MH();
    }
    public static int renamex_np (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) {
        try {
            return (int)vlc_h$constants.renamex_np$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle renameatx_np$MH() {
        return vlc_h$constants.renameatx_np$MH();
    }
    public static int renameatx_np (int x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4) {
        try {
            return (int)vlc_h$constants.renameatx_np$MH().invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static class Cfpos_t extends Clong_long {
        private Cfpos_t() {}
    }
    public static class CFILE extends C__sFILE {
        private CFILE() {}
    }
    public static MethodHandle clearerr$MH() {
        return vlc_h$constants.clearerr$MH();
    }
    public static void clearerr (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            vlc_h$constants.clearerr$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fclose$MH() {
        return vlc_h$constants.fclose$MH();
    }
    public static int fclose (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.fclose$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle feof$MH() {
        return vlc_h$constants.feof$MH();
    }
    public static int feof (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.feof$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle ferror$MH() {
        return vlc_h$constants.ferror$MH();
    }
    public static int ferror (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.ferror$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fflush$MH() {
        return vlc_h$constants.fflush$MH();
    }
    public static int fflush (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.fflush$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fgetc$MH() {
        return vlc_h$constants.fgetc$MH();
    }
    public static int fgetc (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.fgetc$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return vlc_h$constants.fgetpos$MH();
    }
    public static int fgetpos (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (int)vlc_h$constants.fgetpos$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fgets$MH() {
        return vlc_h$constants.fgets$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress fgets (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.fgets$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fopen$MH() {
        return vlc_h$constants.fopen$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress fopen (jdk.incubator.foreign.MemoryAddress __filename, jdk.incubator.foreign.MemoryAddress __mode) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.fopen$MH().invokeExact(__filename, __mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fprintf$MH() {
        return vlc_h$constants.fprintf$MH();
    }
    public static int fprintf (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, Object... x2) {
        try {
            return (int)vlc_h$constants.fprintf$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fputc$MH() {
        return vlc_h$constants.fputc$MH();
    }
    public static int fputc (int x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (int)vlc_h$constants.fputc$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fputs$MH() {
        return vlc_h$constants.fputs$MH();
    }
    public static int fputs (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (int)vlc_h$constants.fputs$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fread$MH() {
        return vlc_h$constants.fread$MH();
    }
    public static long fread (jdk.incubator.foreign.MemoryAddress __ptr, long __size, long __nitems, jdk.incubator.foreign.MemoryAddress __stream) {
        try {
            return (long)vlc_h$constants.fread$MH().invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle freopen$MH() {
        return vlc_h$constants.freopen$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress freopen (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.freopen$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fscanf$MH() {
        return vlc_h$constants.fscanf$MH();
    }
    public static int fscanf (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, Object... x2) {
        try {
            return (int)vlc_h$constants.fscanf$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fseek$MH() {
        return vlc_h$constants.fseek$MH();
    }
    public static int fseek (jdk.incubator.foreign.MemoryAddress x0, long x1, int x2) {
        try {
            return (int)vlc_h$constants.fseek$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return vlc_h$constants.fsetpos$MH();
    }
    public static int fsetpos (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (int)vlc_h$constants.fsetpos$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle ftell$MH() {
        return vlc_h$constants.ftell$MH();
    }
    public static long ftell (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (long)vlc_h$constants.ftell$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fwrite$MH() {
        return vlc_h$constants.fwrite$MH();
    }
    public static long fwrite (jdk.incubator.foreign.MemoryAddress __ptr, long __size, long __nitems, jdk.incubator.foreign.MemoryAddress __stream) {
        try {
            return (long)vlc_h$constants.fwrite$MH().invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle getc$MH() {
        return vlc_h$constants.getc$MH();
    }
    public static int getc (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.getc$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle getchar$MH() {
        return vlc_h$constants.getchar$MH();
    }
    public static int getchar () {
        try {
            return (int)vlc_h$constants.getchar$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle gets$MH() {
        return vlc_h$constants.gets$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress gets (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.gets$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle perror$MH() {
        return vlc_h$constants.perror$MH();
    }
    public static void perror (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            vlc_h$constants.perror$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle printf$MH() {
        return vlc_h$constants.printf$MH();
    }
    public static int printf (jdk.incubator.foreign.MemoryAddress x0, Object... x1) {
        try {
            return (int)vlc_h$constants.printf$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle putc$MH() {
        return vlc_h$constants.putc$MH();
    }
    public static int putc (int x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (int)vlc_h$constants.putc$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle putchar$MH() {
        return vlc_h$constants.putchar$MH();
    }
    public static int putchar (int x0) {
        try {
            return (int)vlc_h$constants.putchar$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle puts$MH() {
        return vlc_h$constants.puts$MH();
    }
    public static int puts (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.puts$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle remove$MH() {
        return vlc_h$constants.remove$MH();
    }
    public static int remove (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.remove$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle rename$MH() {
        return vlc_h$constants.rename$MH();
    }
    public static int rename (jdk.incubator.foreign.MemoryAddress __old, jdk.incubator.foreign.MemoryAddress __new) {
        try {
            return (int)vlc_h$constants.rename$MH().invokeExact(__old, __new);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle rewind$MH() {
        return vlc_h$constants.rewind$MH();
    }
    public static void rewind (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            vlc_h$constants.rewind$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle scanf$MH() {
        return vlc_h$constants.scanf$MH();
    }
    public static int scanf (jdk.incubator.foreign.MemoryAddress x0, Object... x1) {
        try {
            return (int)vlc_h$constants.scanf$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle setbuf$MH() {
        return vlc_h$constants.setbuf$MH();
    }
    public static void setbuf (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            vlc_h$constants.setbuf$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return vlc_h$constants.setvbuf$MH();
    }
    public static int setvbuf (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, long x3) {
        try {
            return (int)vlc_h$constants.setvbuf$MH().invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle sprintf$MH() {
        return vlc_h$constants.sprintf$MH();
    }
    public static int sprintf (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, Object... x2) {
        try {
            return (int)vlc_h$constants.sprintf$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle sscanf$MH() {
        return vlc_h$constants.sscanf$MH();
    }
    public static int sscanf (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, Object... x2) {
        try {
            return (int)vlc_h$constants.sscanf$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return vlc_h$constants.tmpfile$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress tmpfile () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.tmpfile$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return vlc_h$constants.tmpnam$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress tmpnam (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.tmpnam$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle ungetc$MH() {
        return vlc_h$constants.ungetc$MH();
    }
    public static int ungetc (int x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (int)vlc_h$constants.ungetc$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return vlc_h$constants.vfprintf$MH();
    }
    public static int vfprintf (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) {
        try {
            return (int)vlc_h$constants.vfprintf$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle vprintf$MH() {
        return vlc_h$constants.vprintf$MH();
    }
    public static int vprintf (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (int)vlc_h$constants.vprintf$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return vlc_h$constants.vsprintf$MH();
    }
    public static int vsprintf (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) {
        try {
            return (int)vlc_h$constants.vsprintf$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle ctermid$MH() {
        return vlc_h$constants.ctermid$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress ctermid (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.ctermid$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fdopen$MH() {
        return vlc_h$constants.fdopen$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress fdopen (int x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.fdopen$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fileno$MH() {
        return vlc_h$constants.fileno$MH();
    }
    public static int fileno (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.fileno$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle pclose$MH() {
        return vlc_h$constants.pclose$MH();
    }
    public static int pclose (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.pclose$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle popen$MH() {
        return vlc_h$constants.popen$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress popen (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.popen$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle __srget$MH() {
        return vlc_h$constants.__srget$MH();
    }
    public static int __srget (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.__srget$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle __svfscanf$MH() {
        return vlc_h$constants.__svfscanf$MH();
    }
    public static int __svfscanf (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemorySegment x2) {
        try {
            return (int)vlc_h$constants.__svfscanf$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle __swbuf$MH() {
        return vlc_h$constants.__swbuf$MH();
    }
    public static int __swbuf (int x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (int)vlc_h$constants.__swbuf$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle __sputc$MH() {
        return vlc_h$constants.__sputc$MH();
    }
    public static int __sputc (int _c, jdk.incubator.foreign.MemoryAddress _p) {
        try {
            return (int)vlc_h$constants.__sputc$MH().invokeExact(_c, _p);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle flockfile$MH() {
        return vlc_h$constants.flockfile$MH();
    }
    public static void flockfile (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            vlc_h$constants.flockfile$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return vlc_h$constants.ftrylockfile$MH();
    }
    public static int ftrylockfile (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.ftrylockfile$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return vlc_h$constants.funlockfile$MH();
    }
    public static void funlockfile (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            vlc_h$constants.funlockfile$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return vlc_h$constants.getc_unlocked$MH();
    }
    public static int getc_unlocked (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.getc_unlocked$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return vlc_h$constants.getchar_unlocked$MH();
    }
    public static int getchar_unlocked () {
        try {
            return (int)vlc_h$constants.getchar_unlocked$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return vlc_h$constants.putc_unlocked$MH();
    }
    public static int putc_unlocked (int x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (int)vlc_h$constants.putc_unlocked$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return vlc_h$constants.putchar_unlocked$MH();
    }
    public static int putchar_unlocked (int x0) {
        try {
            return (int)vlc_h$constants.putchar_unlocked$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle getw$MH() {
        return vlc_h$constants.getw$MH();
    }
    public static int getw (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.getw$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle putw$MH() {
        return vlc_h$constants.putw$MH();
    }
    public static int putw (int x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (int)vlc_h$constants.putw$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle tempnam$MH() {
        return vlc_h$constants.tempnam$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress tempnam (jdk.incubator.foreign.MemoryAddress __dir, jdk.incubator.foreign.MemoryAddress __prefix) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.tempnam$MH().invokeExact(__dir, __prefix);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static class Coff_t extends Clong_long {
        private Coff_t() {}
    }
    public static MethodHandle fseeko$MH() {
        return vlc_h$constants.fseeko$MH();
    }
    public static int fseeko (jdk.incubator.foreign.MemoryAddress __stream, long __offset, int __whence) {
        try {
            return (int)vlc_h$constants.fseeko$MH().invokeExact(__stream, __offset, __whence);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle ftello$MH() {
        return vlc_h$constants.ftello$MH();
    }
    public static long ftello (jdk.incubator.foreign.MemoryAddress __stream) {
        try {
            return (long)vlc_h$constants.ftello$MH().invokeExact(__stream);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle snprintf$MH() {
        return vlc_h$constants.snprintf$MH();
    }
    public static int snprintf (jdk.incubator.foreign.MemoryAddress __str, long __size, jdk.incubator.foreign.MemoryAddress __format, Object... x3) {
        try {
            return (int)vlc_h$constants.snprintf$MH().invokeExact(__str, __size, __format, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle vfscanf$MH() {
        return vlc_h$constants.vfscanf$MH();
    }
    public static int vfscanf (jdk.incubator.foreign.MemoryAddress __stream, jdk.incubator.foreign.MemoryAddress __format, jdk.incubator.foreign.MemoryAddress x2) {
        try {
            return (int)vlc_h$constants.vfscanf$MH().invokeExact(__stream, __format, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle vscanf$MH() {
        return vlc_h$constants.vscanf$MH();
    }
    public static int vscanf (jdk.incubator.foreign.MemoryAddress __format, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (int)vlc_h$constants.vscanf$MH().invokeExact(__format, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return vlc_h$constants.vsnprintf$MH();
    }
    public static int vsnprintf (jdk.incubator.foreign.MemoryAddress __str, long __size, jdk.incubator.foreign.MemoryAddress __format, jdk.incubator.foreign.MemoryAddress x3) {
        try {
            return (int)vlc_h$constants.vsnprintf$MH().invokeExact(__str, __size, __format, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return vlc_h$constants.vsscanf$MH();
    }
    public static int vsscanf (jdk.incubator.foreign.MemoryAddress __str, jdk.incubator.foreign.MemoryAddress __format, jdk.incubator.foreign.MemoryAddress x2) {
        try {
            return (int)vlc_h$constants.vsscanf$MH().invokeExact(__str, __format, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static class Cssize_t extends Clong {
        private Cssize_t() {}
    }
    public static MethodHandle dprintf$MH() {
        return vlc_h$constants.dprintf$MH();
    }
    public static int dprintf (int x0, jdk.incubator.foreign.MemoryAddress x1, Object... x2) {
        try {
            return (int)vlc_h$constants.dprintf$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return vlc_h$constants.vdprintf$MH();
    }
    public static int vdprintf (int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemorySegment x2) {
        try {
            return (int)vlc_h$constants.vdprintf$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle getdelim$MH() {
        return vlc_h$constants.getdelim$MH();
    }
    public static long getdelim (jdk.incubator.foreign.MemoryAddress __linep, jdk.incubator.foreign.MemoryAddress __linecapp, int __delimiter, jdk.incubator.foreign.MemoryAddress __stream) {
        try {
            return (long)vlc_h$constants.getdelim$MH().invokeExact(__linep, __linecapp, __delimiter, __stream);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle getline$MH() {
        return vlc_h$constants.getline$MH();
    }
    public static long getline (jdk.incubator.foreign.MemoryAddress __linep, jdk.incubator.foreign.MemoryAddress __linecapp, jdk.incubator.foreign.MemoryAddress __stream) {
        try {
            return (long)vlc_h$constants.getline$MH().invokeExact(__linep, __linecapp, __stream);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return vlc_h$constants.fmemopen$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress fmemopen (jdk.incubator.foreign.MemoryAddress __buf, long __size, jdk.incubator.foreign.MemoryAddress __mode) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.fmemopen$MH().invokeExact(__buf, __size, __mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return vlc_h$constants.open_memstream$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress open_memstream (jdk.incubator.foreign.MemoryAddress __bufp, jdk.incubator.foreign.MemoryAddress __sizep) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.open_memstream$MH().invokeExact(__bufp, __sizep);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MemoryLayout sys_nerr$LAYOUT() {
        return vlc_h$constants.sys_nerr$LAYOUT();
    }
    public static VarHandle sys_nerr$VH() {
        return vlc_h$constants.sys_nerr$VH();
    }
    public static MemoryAddress sys_nerr$ADDR() {
        return vlc_h$constants.sys_nerr$ADDR();
    }
    public static int sys_nerr$get() {
        return (int)vlc_h$constants.sys_nerr$VH().get(vlc_h$constants.sys_nerr$ADDR());
    }
    public static void sys_nerr$set(int x) {
        vlc_h$constants.sys_nerr$VH().set(vlc_h$constants.sys_nerr$ADDR(), x);
    }
    public static MemoryAddress sys_errlist$ADDR() {
        return vlc_h$constants.sys_errlist$ADDR();
    }
    public static MethodHandle asprintf$MH() {
        return vlc_h$constants.asprintf$MH();
    }
    public static int asprintf (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, Object... x2) {
        try {
            return (int)vlc_h$constants.asprintf$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle ctermid_r$MH() {
        return vlc_h$constants.ctermid_r$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress ctermid_r (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.ctermid_r$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fgetln$MH() {
        return vlc_h$constants.fgetln$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress fgetln (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.fgetln$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fmtcheck$MH() {
        return vlc_h$constants.fmtcheck$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress fmtcheck (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.fmtcheck$MH().invokeExact(x0, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle fpurge$MH() {
        return vlc_h$constants.fpurge$MH();
    }
    public static int fpurge (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.fpurge$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return vlc_h$constants.setbuffer$MH();
    }
    public static void setbuffer (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) {
        try {
            vlc_h$constants.setbuffer$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return vlc_h$constants.setlinebuf$MH();
    }
    public static int setlinebuf (jdk.incubator.foreign.MemoryAddress x0) {
        try {
            return (int)vlc_h$constants.setlinebuf$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle vasprintf$MH() {
        return vlc_h$constants.vasprintf$MH();
    }
    public static int vasprintf (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemorySegment x2) {
        try {
            return (int)vlc_h$constants.vasprintf$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle zopen$MH() {
        return vlc_h$constants.zopen$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress zopen (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.zopen$MH().invokeExact(x0, x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle funopen$MH() {
        return vlc_h$constants.funopen$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress funopen (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.funopen$MH().invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public interface funopen$x0 {
        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        public static MemorySegment allocate(funopen$x0 fi) {
            return RuntimeHelper.upcallStub(funopen$x0.class, fi, vlc_h$constants.funopen$x0$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        public static MemoryAddress allocate(funopen$x0 fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface funopen$x1 {
        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        public static MemorySegment allocate(funopen$x1 fi) {
            return RuntimeHelper.upcallStub(funopen$x1.class, fi, vlc_h$constants.funopen$x1$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        public static MemoryAddress allocate(funopen$x1 fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface funopen$x2 {
        long apply(jdk.incubator.foreign.MemoryAddress x0, long x1, int x2);
        public static MemorySegment allocate(funopen$x2 fi) {
            return RuntimeHelper.upcallStub(funopen$x2.class, fi, vlc_h$constants.funopen$x2$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;JI)J");
        }
        public static MemoryAddress allocate(funopen$x2 fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface funopen$x3 {
        int apply(jdk.incubator.foreign.MemoryAddress x0);
        public static MemorySegment allocate(funopen$x3 fi) {
            return RuntimeHelper.upcallStub(funopen$x3.class, fi, vlc_h$constants.funopen$x3$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static MemoryAddress allocate(funopen$x3 fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public static MethodHandle __sprintf_chk$MH() {
        return vlc_h$constants.__sprintf_chk$MH();
    }
    public static int __sprintf_chk (jdk.incubator.foreign.MemoryAddress x0, int x1, long x2, jdk.incubator.foreign.MemoryAddress x3, Object... x4) {
        try {
            return (int)vlc_h$constants.__sprintf_chk$MH().invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle __snprintf_chk$MH() {
        return vlc_h$constants.__snprintf_chk$MH();
    }
    public static int __snprintf_chk (jdk.incubator.foreign.MemoryAddress x0, long x1, int x2, long x3, jdk.incubator.foreign.MemoryAddress x4, Object... x5) {
        try {
            return (int)vlc_h$constants.__snprintf_chk$MH().invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle __vsprintf_chk$MH() {
        return vlc_h$constants.__vsprintf_chk$MH();
    }
    public static int __vsprintf_chk (jdk.incubator.foreign.MemoryAddress x0, int x1, long x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemorySegment x4) {
        try {
            return (int)vlc_h$constants.__vsprintf_chk$MH().invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle __vsnprintf_chk$MH() {
        return vlc_h$constants.__vsnprintf_chk$MH();
    }
    public static int __vsnprintf_chk (jdk.incubator.foreign.MemoryAddress x0, long x1, int x2, long x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemorySegment x5) {
        try {
            return (int)vlc_h$constants.__vsnprintf_chk$MH().invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static class Cint_least16_t extends Cshort {
        private Cint_least16_t() {}
    }
    public static class Cint_least32_t extends Cint {
        private Cint_least32_t() {}
    }
    public static class Cint_least64_t extends Clong_long {
        private Cint_least64_t() {}
    }
    public static class Cint_fast16_t extends Cshort {
        private Cint_fast16_t() {}
    }
    public static class Cint_fast32_t extends Cint {
        private Cint_fast32_t() {}
    }
    public static class Cint_fast64_t extends Clong_long {
        private Cint_fast64_t() {}
    }
    public static class Cintmax_t extends Clong {
        private Cintmax_t() {}
    }
    public static class Clibvlc_time_t extends Clong_long {
        private Clibvlc_time_t() {}
    }
    public static MethodHandle libvlc_errmsg$MH() {
        return vlc_h$constants.libvlc_errmsg$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_errmsg () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_errmsg$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_clearerr$MH() {
        return vlc_h$constants.libvlc_clearerr$MH();
    }
    public static void libvlc_clearerr () {
        try {
            vlc_h$constants.libvlc_clearerr$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vprinterr$MH() {
        return vlc_h$constants.libvlc_vprinterr$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_vprinterr (jdk.incubator.foreign.MemoryAddress fmt, jdk.incubator.foreign.MemorySegment ap) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_vprinterr$MH().invokeExact(fmt, ap);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_printerr$MH() {
        return vlc_h$constants.libvlc_printerr$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_printerr (jdk.incubator.foreign.MemoryAddress fmt, Object... x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_printerr$MH().invokeExact(fmt, x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_new$MH() {
        return vlc_h$constants.libvlc_new$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_new (int argc, jdk.incubator.foreign.MemoryAddress argv) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_new$MH().invokeExact(argc, argv);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_release$MH() {
        return vlc_h$constants.libvlc_release$MH();
    }
    public static void libvlc_release (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            vlc_h$constants.libvlc_release$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_retain$MH() {
        return vlc_h$constants.libvlc_retain$MH();
    }
    public static void libvlc_retain (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            vlc_h$constants.libvlc_retain$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_add_intf$MH() {
        return vlc_h$constants.libvlc_add_intf$MH();
    }
    public static int libvlc_add_intf (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress name) {
        try {
            return (int)vlc_h$constants.libvlc_add_intf$MH().invokeExact(p_instance, name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_set_exit_handler$MH() {
        return vlc_h$constants.libvlc_set_exit_handler$MH();
    }
    public static void libvlc_set_exit_handler (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress cb, jdk.incubator.foreign.MemoryAddress opaque) {
        try {
            vlc_h$constants.libvlc_set_exit_handler$MH().invokeExact(p_instance, cb, opaque);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public interface libvlc_set_exit_handler$cb {
        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static MemorySegment allocate(libvlc_set_exit_handler$cb fi) {
            return RuntimeHelper.upcallStub(libvlc_set_exit_handler$cb.class, fi, vlc_h$constants.libvlc_set_exit_handler$cb$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static MemoryAddress allocate(libvlc_set_exit_handler$cb fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public static MethodHandle libvlc_set_user_agent$MH() {
        return vlc_h$constants.libvlc_set_user_agent$MH();
    }
    public static void libvlc_set_user_agent (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress name, jdk.incubator.foreign.MemoryAddress http) {
        try {
            vlc_h$constants.libvlc_set_user_agent$MH().invokeExact(p_instance, name, http);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_set_app_id$MH() {
        return vlc_h$constants.libvlc_set_app_id$MH();
    }
    public static void libvlc_set_app_id (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress id, jdk.incubator.foreign.MemoryAddress version, jdk.incubator.foreign.MemoryAddress icon) {
        try {
            vlc_h$constants.libvlc_set_app_id$MH().invokeExact(p_instance, id, version, icon);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_get_version$MH() {
        return vlc_h$constants.libvlc_get_version$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_get_version () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_get_version$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_get_compiler$MH() {
        return vlc_h$constants.libvlc_get_compiler$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_get_compiler () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_get_compiler$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_get_changeset$MH() {
        return vlc_h$constants.libvlc_get_changeset$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_get_changeset () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_get_changeset$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_free$MH() {
        return vlc_h$constants.libvlc_free$MH();
    }
    public static void libvlc_free (jdk.incubator.foreign.MemoryAddress ptr) {
        try {
            vlc_h$constants.libvlc_free$MH().invokeExact(ptr);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static class Clibvlc_event_type_t extends Cint {
        private Clibvlc_event_type_t() {}
    }
    public static MethodHandle libvlc_event_attach$MH() {
        return vlc_h$constants.libvlc_event_attach$MH();
    }
    public static int libvlc_event_attach (jdk.incubator.foreign.MemoryAddress p_event_manager, int i_event_type, jdk.incubator.foreign.MemoryAddress f_callback, jdk.incubator.foreign.MemoryAddress user_data) {
        try {
            return (int)vlc_h$constants.libvlc_event_attach$MH().invokeExact(p_event_manager, i_event_type, f_callback, user_data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public interface libvlc_event_attach$f_callback {
        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static MemorySegment allocate(libvlc_event_attach$f_callback fi) {
            return RuntimeHelper.upcallStub(libvlc_event_attach$f_callback.class, fi, vlc_h$constants.libvlc_event_attach$f_callback$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static MemoryAddress allocate(libvlc_event_attach$f_callback fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public static MethodHandle libvlc_event_detach$MH() {
        return vlc_h$constants.libvlc_event_detach$MH();
    }
    public static void libvlc_event_detach (jdk.incubator.foreign.MemoryAddress p_event_manager, int i_event_type, jdk.incubator.foreign.MemoryAddress f_callback, jdk.incubator.foreign.MemoryAddress p_user_data) {
        try {
            vlc_h$constants.libvlc_event_detach$MH().invokeExact(p_event_manager, i_event_type, f_callback, p_user_data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public interface libvlc_event_detach$f_callback {
        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static MemorySegment allocate(libvlc_event_detach$f_callback fi) {
            return RuntimeHelper.upcallStub(libvlc_event_detach$f_callback.class, fi, vlc_h$constants.libvlc_event_detach$f_callback$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static MemoryAddress allocate(libvlc_event_detach$f_callback fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public static MethodHandle libvlc_event_type_name$MH() {
        return vlc_h$constants.libvlc_event_type_name$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_event_type_name (int event_type) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_event_type_name$MH().invokeExact(event_type);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static int LIBVLC_DEBUG() {
        return vlc_h$constants.LIBVLC_DEBUG();
    }
    public static int LIBVLC_NOTICE() {
        return vlc_h$constants.LIBVLC_NOTICE();
    }
    public static int LIBVLC_WARNING() {
        return vlc_h$constants.LIBVLC_WARNING();
    }
    public static int LIBVLC_ERROR() {
        return vlc_h$constants.LIBVLC_ERROR();
    }
    public static MethodHandle libvlc_log_get_context$MH() {
        return vlc_h$constants.libvlc_log_get_context$MH();
    }
    public static void libvlc_log_get_context (jdk.incubator.foreign.MemoryAddress ctx, jdk.incubator.foreign.MemoryAddress module, jdk.incubator.foreign.MemoryAddress file, jdk.incubator.foreign.MemoryAddress line) {
        try {
            vlc_h$constants.libvlc_log_get_context$MH().invokeExact(ctx, module, file, line);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_log_get_object$MH() {
        return vlc_h$constants.libvlc_log_get_object$MH();
    }
    public static void libvlc_log_get_object (jdk.incubator.foreign.MemoryAddress ctx, jdk.incubator.foreign.MemoryAddress name, jdk.incubator.foreign.MemoryAddress header, jdk.incubator.foreign.MemoryAddress id) {
        try {
            vlc_h$constants.libvlc_log_get_object$MH().invokeExact(ctx, name, header, id);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_log_unset$MH() {
        return vlc_h$constants.libvlc_log_unset$MH();
    }
    public static void libvlc_log_unset (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            vlc_h$constants.libvlc_log_unset$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_log_set$MH() {
        return vlc_h$constants.libvlc_log_set$MH();
    }
    public static void libvlc_log_set (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress cb, jdk.incubator.foreign.MemoryAddress data) {
        try {
            vlc_h$constants.libvlc_log_set$MH().invokeExact(p_instance, cb, data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public interface libvlc_log_set$cb {
        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4);
        public static MemorySegment allocate(libvlc_log_set$cb fi) {
            return RuntimeHelper.upcallStub(libvlc_log_set$cb.class, fi, vlc_h$constants.libvlc_log_set$cb$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static MemoryAddress allocate(libvlc_log_set$cb fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public static MethodHandle libvlc_log_set_file$MH() {
        return vlc_h$constants.libvlc_log_set_file$MH();
    }
    public static void libvlc_log_set_file (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress stream) {
        try {
            vlc_h$constants.libvlc_log_set_file$MH().invokeExact(p_instance, stream);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_module_description_list_release$MH() {
        return vlc_h$constants.libvlc_module_description_list_release$MH();
    }
    public static void libvlc_module_description_list_release (jdk.incubator.foreign.MemoryAddress p_list) {
        try {
            vlc_h$constants.libvlc_module_description_list_release$MH().invokeExact(p_list);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_filter_list_get$MH() {
        return vlc_h$constants.libvlc_audio_filter_list_get$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_audio_filter_list_get (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_audio_filter_list_get$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_filter_list_get$MH() {
        return vlc_h$constants.libvlc_video_filter_list_get$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_video_filter_list_get (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_video_filter_list_get$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_clock$MH() {
        return vlc_h$constants.libvlc_clock$MH();
    }
    public static long libvlc_clock () {
        try {
            return (long)vlc_h$constants.libvlc_clock$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_delay$MH() {
        return vlc_h$constants.libvlc_delay$MH();
    }
    public static long libvlc_delay (long pts) {
        try {
            return (long)vlc_h$constants.libvlc_delay$MH().invokeExact(pts);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_renderer_item_hold$MH() {
        return vlc_h$constants.libvlc_renderer_item_hold$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_renderer_item_hold (jdk.incubator.foreign.MemoryAddress p_item) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_renderer_item_hold$MH().invokeExact(p_item);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_renderer_item_release$MH() {
        return vlc_h$constants.libvlc_renderer_item_release$MH();
    }
    public static void libvlc_renderer_item_release (jdk.incubator.foreign.MemoryAddress p_item) {
        try {
            vlc_h$constants.libvlc_renderer_item_release$MH().invokeExact(p_item);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_renderer_item_name$MH() {
        return vlc_h$constants.libvlc_renderer_item_name$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_renderer_item_name (jdk.incubator.foreign.MemoryAddress p_item) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_renderer_item_name$MH().invokeExact(p_item);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_renderer_item_type$MH() {
        return vlc_h$constants.libvlc_renderer_item_type$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_renderer_item_type (jdk.incubator.foreign.MemoryAddress p_item) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_renderer_item_type$MH().invokeExact(p_item);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_renderer_item_icon_uri$MH() {
        return vlc_h$constants.libvlc_renderer_item_icon_uri$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_renderer_item_icon_uri (jdk.incubator.foreign.MemoryAddress p_item) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_renderer_item_icon_uri$MH().invokeExact(p_item);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_renderer_item_flags$MH() {
        return vlc_h$constants.libvlc_renderer_item_flags$MH();
    }
    public static int libvlc_renderer_item_flags (jdk.incubator.foreign.MemoryAddress p_item) {
        try {
            return (int)vlc_h$constants.libvlc_renderer_item_flags$MH().invokeExact(p_item);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_renderer_discoverer_new$MH() {
        return vlc_h$constants.libvlc_renderer_discoverer_new$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_renderer_discoverer_new (jdk.incubator.foreign.MemoryAddress p_inst, jdk.incubator.foreign.MemoryAddress psz_name) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_renderer_discoverer_new$MH().invokeExact(p_inst, psz_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_renderer_discoverer_release$MH() {
        return vlc_h$constants.libvlc_renderer_discoverer_release$MH();
    }
    public static void libvlc_renderer_discoverer_release (jdk.incubator.foreign.MemoryAddress p_rd) {
        try {
            vlc_h$constants.libvlc_renderer_discoverer_release$MH().invokeExact(p_rd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_renderer_discoverer_start$MH() {
        return vlc_h$constants.libvlc_renderer_discoverer_start$MH();
    }
    public static int libvlc_renderer_discoverer_start (jdk.incubator.foreign.MemoryAddress p_rd) {
        try {
            return (int)vlc_h$constants.libvlc_renderer_discoverer_start$MH().invokeExact(p_rd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_renderer_discoverer_stop$MH() {
        return vlc_h$constants.libvlc_renderer_discoverer_stop$MH();
    }
    public static void libvlc_renderer_discoverer_stop (jdk.incubator.foreign.MemoryAddress p_rd) {
        try {
            vlc_h$constants.libvlc_renderer_discoverer_stop$MH().invokeExact(p_rd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_renderer_discoverer_event_manager$MH() {
        return vlc_h$constants.libvlc_renderer_discoverer_event_manager$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_renderer_discoverer_event_manager (jdk.incubator.foreign.MemoryAddress p_rd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_renderer_discoverer_event_manager$MH().invokeExact(p_rd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_renderer_discoverer_list_get$MH() {
        return vlc_h$constants.libvlc_renderer_discoverer_list_get$MH();
    }
    public static long libvlc_renderer_discoverer_list_get (jdk.incubator.foreign.MemoryAddress p_inst, jdk.incubator.foreign.MemoryAddress ppp_services) {
        try {
            return (long)vlc_h$constants.libvlc_renderer_discoverer_list_get$MH().invokeExact(p_inst, ppp_services);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_renderer_discoverer_list_release$MH() {
        return vlc_h$constants.libvlc_renderer_discoverer_list_release$MH();
    }
    public static void libvlc_renderer_discoverer_list_release (jdk.incubator.foreign.MemoryAddress pp_services, long i_count) {
        try {
            vlc_h$constants.libvlc_renderer_discoverer_list_release$MH().invokeExact(pp_services, i_count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static int libvlc_meta_Title() {
        return vlc_h$constants.libvlc_meta_Title();
    }
    public static int libvlc_meta_Artist() {
        return vlc_h$constants.libvlc_meta_Artist();
    }
    public static int libvlc_meta_Genre() {
        return vlc_h$constants.libvlc_meta_Genre();
    }
    public static int libvlc_meta_Copyright() {
        return vlc_h$constants.libvlc_meta_Copyright();
    }
    public static int libvlc_meta_Album() {
        return vlc_h$constants.libvlc_meta_Album();
    }
    public static int libvlc_meta_TrackNumber() {
        return vlc_h$constants.libvlc_meta_TrackNumber();
    }
    public static int libvlc_meta_Description() {
        return vlc_h$constants.libvlc_meta_Description();
    }
    public static int libvlc_meta_Rating() {
        return vlc_h$constants.libvlc_meta_Rating();
    }
    public static int libvlc_meta_Date() {
        return vlc_h$constants.libvlc_meta_Date();
    }
    public static int libvlc_meta_Setting() {
        return vlc_h$constants.libvlc_meta_Setting();
    }
    public static int libvlc_meta_URL() {
        return vlc_h$constants.libvlc_meta_URL();
    }
    public static int libvlc_meta_Language() {
        return vlc_h$constants.libvlc_meta_Language();
    }
    public static int libvlc_meta_NowPlaying() {
        return vlc_h$constants.libvlc_meta_NowPlaying();
    }
    public static int libvlc_meta_Publisher() {
        return vlc_h$constants.libvlc_meta_Publisher();
    }
    public static int libvlc_meta_EncodedBy() {
        return vlc_h$constants.libvlc_meta_EncodedBy();
    }
    public static int libvlc_meta_ArtworkURL() {
        return vlc_h$constants.libvlc_meta_ArtworkURL();
    }
    public static int libvlc_meta_TrackID() {
        return vlc_h$constants.libvlc_meta_TrackID();
    }
    public static int libvlc_meta_TrackTotal() {
        return vlc_h$constants.libvlc_meta_TrackTotal();
    }
    public static int libvlc_meta_Director() {
        return vlc_h$constants.libvlc_meta_Director();
    }
    public static int libvlc_meta_Season() {
        return vlc_h$constants.libvlc_meta_Season();
    }
    public static int libvlc_meta_Episode() {
        return vlc_h$constants.libvlc_meta_Episode();
    }
    public static int libvlc_meta_ShowName() {
        return vlc_h$constants.libvlc_meta_ShowName();
    }
    public static int libvlc_meta_Actors() {
        return vlc_h$constants.libvlc_meta_Actors();
    }
    public static int libvlc_meta_AlbumArtist() {
        return vlc_h$constants.libvlc_meta_AlbumArtist();
    }
    public static int libvlc_meta_DiscNumber() {
        return vlc_h$constants.libvlc_meta_DiscNumber();
    }
    public static int libvlc_meta_DiscTotal() {
        return vlc_h$constants.libvlc_meta_DiscTotal();
    }
    public static int libvlc_NothingSpecial() {
        return vlc_h$constants.libvlc_NothingSpecial();
    }
    public static int libvlc_Opening() {
        return vlc_h$constants.libvlc_Opening();
    }
    public static int libvlc_Buffering() {
        return vlc_h$constants.libvlc_Buffering();
    }
    public static int libvlc_Playing() {
        return vlc_h$constants.libvlc_Playing();
    }
    public static int libvlc_Paused() {
        return vlc_h$constants.libvlc_Paused();
    }
    public static int libvlc_Stopped() {
        return vlc_h$constants.libvlc_Stopped();
    }
    public static int libvlc_Ended() {
        return vlc_h$constants.libvlc_Ended();
    }
    public static int libvlc_Error() {
        return vlc_h$constants.libvlc_Error();
    }
    public static int libvlc_media_option_trusted() {
        return vlc_h$constants.libvlc_media_option_trusted();
    }
    public static int libvlc_media_option_unique() {
        return vlc_h$constants.libvlc_media_option_unique();
    }
    public static int libvlc_track_unknown() {
        return vlc_h$constants.libvlc_track_unknown();
    }
    public static int libvlc_track_audio() {
        return vlc_h$constants.libvlc_track_audio();
    }
    public static int libvlc_track_video() {
        return vlc_h$constants.libvlc_track_video();
    }
    public static int libvlc_track_text() {
        return vlc_h$constants.libvlc_track_text();
    }
    public static int libvlc_video_orient_top_left() {
        return vlc_h$constants.libvlc_video_orient_top_left();
    }
    public static int libvlc_video_orient_top_right() {
        return vlc_h$constants.libvlc_video_orient_top_right();
    }
    public static int libvlc_video_orient_bottom_left() {
        return vlc_h$constants.libvlc_video_orient_bottom_left();
    }
    public static int libvlc_video_orient_bottom_right() {
        return vlc_h$constants.libvlc_video_orient_bottom_right();
    }
    public static int libvlc_video_orient_left_top() {
        return vlc_h$constants.libvlc_video_orient_left_top();
    }
    public static int libvlc_video_orient_left_bottom() {
        return vlc_h$constants.libvlc_video_orient_left_bottom();
    }
    public static int libvlc_video_orient_right_top() {
        return vlc_h$constants.libvlc_video_orient_right_top();
    }
    public static int libvlc_video_orient_right_bottom() {
        return vlc_h$constants.libvlc_video_orient_right_bottom();
    }
    public static int libvlc_video_projection_rectangular() {
        return vlc_h$constants.libvlc_video_projection_rectangular();
    }
    public static int libvlc_video_projection_equirectangular() {
        return vlc_h$constants.libvlc_video_projection_equirectangular();
    }
    public static int libvlc_video_projection_cubemap_layout_standard() {
        return vlc_h$constants.libvlc_video_projection_cubemap_layout_standard();
    }
    public static int libvlc_media_type_unknown() {
        return vlc_h$constants.libvlc_media_type_unknown();
    }
    public static int libvlc_media_type_file() {
        return vlc_h$constants.libvlc_media_type_file();
    }
    public static int libvlc_media_type_directory() {
        return vlc_h$constants.libvlc_media_type_directory();
    }
    public static int libvlc_media_type_disc() {
        return vlc_h$constants.libvlc_media_type_disc();
    }
    public static int libvlc_media_type_stream() {
        return vlc_h$constants.libvlc_media_type_stream();
    }
    public static int libvlc_media_type_playlist() {
        return vlc_h$constants.libvlc_media_type_playlist();
    }
    public static int libvlc_media_parse_local() {
        return vlc_h$constants.libvlc_media_parse_local();
    }
    public static int libvlc_media_parse_network() {
        return vlc_h$constants.libvlc_media_parse_network();
    }
    public static int libvlc_media_fetch_local() {
        return vlc_h$constants.libvlc_media_fetch_local();
    }
    public static int libvlc_media_fetch_network() {
        return vlc_h$constants.libvlc_media_fetch_network();
    }
    public static int libvlc_media_do_interact() {
        return vlc_h$constants.libvlc_media_do_interact();
    }
    public static int libvlc_media_parsed_status_skipped() {
        return vlc_h$constants.libvlc_media_parsed_status_skipped();
    }
    public static int libvlc_media_parsed_status_failed() {
        return vlc_h$constants.libvlc_media_parsed_status_failed();
    }
    public static int libvlc_media_parsed_status_timeout() {
        return vlc_h$constants.libvlc_media_parsed_status_timeout();
    }
    public static int libvlc_media_parsed_status_done() {
        return vlc_h$constants.libvlc_media_parsed_status_done();
    }
    public static int libvlc_media_slave_type_subtitle() {
        return vlc_h$constants.libvlc_media_slave_type_subtitle();
    }
    public static int libvlc_media_slave_type_audio() {
        return vlc_h$constants.libvlc_media_slave_type_audio();
    }
    public static MethodHandle libvlc_media_new_location$MH() {
        return vlc_h$constants.libvlc_media_new_location$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_new_location (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_mrl) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_new_location$MH().invokeExact(p_instance, psz_mrl);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_new_path$MH() {
        return vlc_h$constants.libvlc_media_new_path$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_new_path (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress path) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_new_path$MH().invokeExact(p_instance, path);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_new_fd$MH() {
        return vlc_h$constants.libvlc_media_new_fd$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_new_fd (jdk.incubator.foreign.MemoryAddress p_instance, int fd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_new_fd$MH().invokeExact(p_instance, fd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_new_callbacks$MH() {
        return vlc_h$constants.libvlc_media_new_callbacks$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_new_callbacks (jdk.incubator.foreign.MemoryAddress instance, jdk.incubator.foreign.MemoryAddress open_cb, jdk.incubator.foreign.MemoryAddress read_cb, jdk.incubator.foreign.MemoryAddress seek_cb, jdk.incubator.foreign.MemoryAddress close_cb, jdk.incubator.foreign.MemoryAddress opaque) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_new_callbacks$MH().invokeExact(instance, open_cb, read_cb, seek_cb, close_cb, opaque);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public interface libvlc_media_new_callbacks$open_cb {
        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        public static MemorySegment allocate(libvlc_media_new_callbacks$open_cb fi) {
            return RuntimeHelper.upcallStub(libvlc_media_new_callbacks$open_cb.class, fi, vlc_h$constants.libvlc_media_new_callbacks$open_cb$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static MemoryAddress allocate(libvlc_media_new_callbacks$open_cb fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface libvlc_media_new_callbacks$read_cb {
        long apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
        public static MemorySegment allocate(libvlc_media_new_callbacks$read_cb fi) {
            return RuntimeHelper.upcallStub(libvlc_media_new_callbacks$read_cb.class, fi, vlc_h$constants.libvlc_media_new_callbacks$read_cb$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J");
        }
        public static MemoryAddress allocate(libvlc_media_new_callbacks$read_cb fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface libvlc_media_new_callbacks$seek_cb {
        int apply(jdk.incubator.foreign.MemoryAddress x0, long x1);
        public static MemorySegment allocate(libvlc_media_new_callbacks$seek_cb fi) {
            return RuntimeHelper.upcallStub(libvlc_media_new_callbacks$seek_cb.class, fi, vlc_h$constants.libvlc_media_new_callbacks$seek_cb$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;J)I");
        }
        public static MemoryAddress allocate(libvlc_media_new_callbacks$seek_cb fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface libvlc_media_new_callbacks$close_cb {
        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static MemorySegment allocate(libvlc_media_new_callbacks$close_cb fi) {
            return RuntimeHelper.upcallStub(libvlc_media_new_callbacks$close_cb.class, fi, vlc_h$constants.libvlc_media_new_callbacks$close_cb$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static MemoryAddress allocate(libvlc_media_new_callbacks$close_cb fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public static MethodHandle libvlc_media_new_as_node$MH() {
        return vlc_h$constants.libvlc_media_new_as_node$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_new_as_node (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_new_as_node$MH().invokeExact(p_instance, psz_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_add_option$MH() {
        return vlc_h$constants.libvlc_media_add_option$MH();
    }
    public static void libvlc_media_add_option (jdk.incubator.foreign.MemoryAddress p_md, jdk.incubator.foreign.MemoryAddress psz_options) {
        try {
            vlc_h$constants.libvlc_media_add_option$MH().invokeExact(p_md, psz_options);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_add_option_flag$MH() {
        return vlc_h$constants.libvlc_media_add_option_flag$MH();
    }
    public static void libvlc_media_add_option_flag (jdk.incubator.foreign.MemoryAddress p_md, jdk.incubator.foreign.MemoryAddress psz_options, int i_flags) {
        try {
            vlc_h$constants.libvlc_media_add_option_flag$MH().invokeExact(p_md, psz_options, i_flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_retain$MH() {
        return vlc_h$constants.libvlc_media_retain$MH();
    }
    public static void libvlc_media_retain (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            vlc_h$constants.libvlc_media_retain$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_release$MH() {
        return vlc_h$constants.libvlc_media_release$MH();
    }
    public static void libvlc_media_release (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            vlc_h$constants.libvlc_media_release$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_get_mrl$MH() {
        return vlc_h$constants.libvlc_media_get_mrl$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_get_mrl (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_get_mrl$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_duplicate$MH() {
        return vlc_h$constants.libvlc_media_duplicate$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_duplicate (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_duplicate$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_get_meta$MH() {
        return vlc_h$constants.libvlc_media_get_meta$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_get_meta (jdk.incubator.foreign.MemoryAddress p_md, int e_meta) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_get_meta$MH().invokeExact(p_md, e_meta);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_set_meta$MH() {
        return vlc_h$constants.libvlc_media_set_meta$MH();
    }
    public static void libvlc_media_set_meta (jdk.incubator.foreign.MemoryAddress p_md, int e_meta, jdk.incubator.foreign.MemoryAddress psz_value) {
        try {
            vlc_h$constants.libvlc_media_set_meta$MH().invokeExact(p_md, e_meta, psz_value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_save_meta$MH() {
        return vlc_h$constants.libvlc_media_save_meta$MH();
    }
    public static int libvlc_media_save_meta (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (int)vlc_h$constants.libvlc_media_save_meta$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_get_state$MH() {
        return vlc_h$constants.libvlc_media_get_state$MH();
    }
    public static int libvlc_media_get_state (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (int)vlc_h$constants.libvlc_media_get_state$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_get_stats$MH() {
        return vlc_h$constants.libvlc_media_get_stats$MH();
    }
    public static int libvlc_media_get_stats (jdk.incubator.foreign.MemoryAddress p_md, jdk.incubator.foreign.MemoryAddress p_stats) {
        try {
            return (int)vlc_h$constants.libvlc_media_get_stats$MH().invokeExact(p_md, p_stats);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_subitems$MH() {
        return vlc_h$constants.libvlc_media_subitems$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_subitems (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_subitems$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_event_manager$MH() {
        return vlc_h$constants.libvlc_media_event_manager$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_event_manager (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_event_manager$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_get_duration$MH() {
        return vlc_h$constants.libvlc_media_get_duration$MH();
    }
    public static long libvlc_media_get_duration (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (long)vlc_h$constants.libvlc_media_get_duration$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_parse_with_options$MH() {
        return vlc_h$constants.libvlc_media_parse_with_options$MH();
    }
    public static int libvlc_media_parse_with_options (jdk.incubator.foreign.MemoryAddress p_md, int parse_flag, int timeout) {
        try {
            return (int)vlc_h$constants.libvlc_media_parse_with_options$MH().invokeExact(p_md, parse_flag, timeout);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_parse_stop$MH() {
        return vlc_h$constants.libvlc_media_parse_stop$MH();
    }
    public static void libvlc_media_parse_stop (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            vlc_h$constants.libvlc_media_parse_stop$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_get_parsed_status$MH() {
        return vlc_h$constants.libvlc_media_get_parsed_status$MH();
    }
    public static int libvlc_media_get_parsed_status (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (int)vlc_h$constants.libvlc_media_get_parsed_status$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_set_user_data$MH() {
        return vlc_h$constants.libvlc_media_set_user_data$MH();
    }
    public static void libvlc_media_set_user_data (jdk.incubator.foreign.MemoryAddress p_md, jdk.incubator.foreign.MemoryAddress p_new_user_data) {
        try {
            vlc_h$constants.libvlc_media_set_user_data$MH().invokeExact(p_md, p_new_user_data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_get_user_data$MH() {
        return vlc_h$constants.libvlc_media_get_user_data$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_get_user_data (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_get_user_data$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_tracks_get$MH() {
        return vlc_h$constants.libvlc_media_tracks_get$MH();
    }
    public static int libvlc_media_tracks_get (jdk.incubator.foreign.MemoryAddress p_md, jdk.incubator.foreign.MemoryAddress tracks) {
        try {
            return (int)vlc_h$constants.libvlc_media_tracks_get$MH().invokeExact(p_md, tracks);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_get_codec_description$MH() {
        return vlc_h$constants.libvlc_media_get_codec_description$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_get_codec_description (int i_type, int i_codec) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_get_codec_description$MH().invokeExact(i_type, i_codec);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_tracks_release$MH() {
        return vlc_h$constants.libvlc_media_tracks_release$MH();
    }
    public static void libvlc_media_tracks_release (jdk.incubator.foreign.MemoryAddress p_tracks, int i_count) {
        try {
            vlc_h$constants.libvlc_media_tracks_release$MH().invokeExact(p_tracks, i_count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_get_type$MH() {
        return vlc_h$constants.libvlc_media_get_type$MH();
    }
    public static int libvlc_media_get_type (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (int)vlc_h$constants.libvlc_media_get_type$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_slaves_add$MH() {
        return vlc_h$constants.libvlc_media_slaves_add$MH();
    }
    public static int libvlc_media_slaves_add (jdk.incubator.foreign.MemoryAddress p_md, int i_type, int i_priority, jdk.incubator.foreign.MemoryAddress psz_uri) {
        try {
            return (int)vlc_h$constants.libvlc_media_slaves_add$MH().invokeExact(p_md, i_type, i_priority, psz_uri);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_slaves_clear$MH() {
        return vlc_h$constants.libvlc_media_slaves_clear$MH();
    }
    public static void libvlc_media_slaves_clear (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            vlc_h$constants.libvlc_media_slaves_clear$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_slaves_get$MH() {
        return vlc_h$constants.libvlc_media_slaves_get$MH();
    }
    public static int libvlc_media_slaves_get (jdk.incubator.foreign.MemoryAddress p_md, jdk.incubator.foreign.MemoryAddress ppp_slaves) {
        try {
            return (int)vlc_h$constants.libvlc_media_slaves_get$MH().invokeExact(p_md, ppp_slaves);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_slaves_release$MH() {
        return vlc_h$constants.libvlc_media_slaves_release$MH();
    }
    public static void libvlc_media_slaves_release (jdk.incubator.foreign.MemoryAddress pp_slaves, int i_count) {
        try {
            vlc_h$constants.libvlc_media_slaves_release$MH().invokeExact(pp_slaves, i_count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static int libvlc_title_menu() {
        return vlc_h$constants.libvlc_title_menu();
    }
    public static int libvlc_title_interactive() {
        return vlc_h$constants.libvlc_title_interactive();
    }
    public static int libvlc_marquee_Enable() {
        return vlc_h$constants.libvlc_marquee_Enable();
    }
    public static int libvlc_marquee_Text() {
        return vlc_h$constants.libvlc_marquee_Text();
    }
    public static int libvlc_marquee_Color() {
        return vlc_h$constants.libvlc_marquee_Color();
    }
    public static int libvlc_marquee_Opacity() {
        return vlc_h$constants.libvlc_marquee_Opacity();
    }
    public static int libvlc_marquee_Position() {
        return vlc_h$constants.libvlc_marquee_Position();
    }
    public static int libvlc_marquee_Refresh() {
        return vlc_h$constants.libvlc_marquee_Refresh();
    }
    public static int libvlc_marquee_Size() {
        return vlc_h$constants.libvlc_marquee_Size();
    }
    public static int libvlc_marquee_Timeout() {
        return vlc_h$constants.libvlc_marquee_Timeout();
    }
    public static int libvlc_marquee_X() {
        return vlc_h$constants.libvlc_marquee_X();
    }
    public static int libvlc_marquee_Y() {
        return vlc_h$constants.libvlc_marquee_Y();
    }
    public static int libvlc_navigate_activate() {
        return vlc_h$constants.libvlc_navigate_activate();
    }
    public static int libvlc_navigate_up() {
        return vlc_h$constants.libvlc_navigate_up();
    }
    public static int libvlc_navigate_down() {
        return vlc_h$constants.libvlc_navigate_down();
    }
    public static int libvlc_navigate_left() {
        return vlc_h$constants.libvlc_navigate_left();
    }
    public static int libvlc_navigate_right() {
        return vlc_h$constants.libvlc_navigate_right();
    }
    public static int libvlc_navigate_popup() {
        return vlc_h$constants.libvlc_navigate_popup();
    }
    public static int libvlc_position_disable() {
        return vlc_h$constants.libvlc_position_disable();
    }
    public static int libvlc_position_center() {
        return vlc_h$constants.libvlc_position_center();
    }
    public static int libvlc_position_left() {
        return vlc_h$constants.libvlc_position_left();
    }
    public static int libvlc_position_right() {
        return vlc_h$constants.libvlc_position_right();
    }
    public static int libvlc_position_top() {
        return vlc_h$constants.libvlc_position_top();
    }
    public static int libvlc_position_top_left() {
        return vlc_h$constants.libvlc_position_top_left();
    }
    public static int libvlc_position_top_right() {
        return vlc_h$constants.libvlc_position_top_right();
    }
    public static int libvlc_position_bottom() {
        return vlc_h$constants.libvlc_position_bottom();
    }
    public static int libvlc_position_bottom_left() {
        return vlc_h$constants.libvlc_position_bottom_left();
    }
    public static int libvlc_position_bottom_right() {
        return vlc_h$constants.libvlc_position_bottom_right();
    }
    public static int libvlc_teletext_key_red() {
        return vlc_h$constants.libvlc_teletext_key_red();
    }
    public static int libvlc_teletext_key_green() {
        return vlc_h$constants.libvlc_teletext_key_green();
    }
    public static int libvlc_teletext_key_yellow() {
        return vlc_h$constants.libvlc_teletext_key_yellow();
    }
    public static int libvlc_teletext_key_blue() {
        return vlc_h$constants.libvlc_teletext_key_blue();
    }
    public static int libvlc_teletext_key_index() {
        return vlc_h$constants.libvlc_teletext_key_index();
    }
    public static MethodHandle libvlc_media_player_new$MH() {
        return vlc_h$constants.libvlc_media_player_new$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_player_new (jdk.incubator.foreign.MemoryAddress p_libvlc_instance) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_player_new$MH().invokeExact(p_libvlc_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_new_from_media$MH() {
        return vlc_h$constants.libvlc_media_player_new_from_media$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_player_new_from_media (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_player_new_from_media$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_release$MH() {
        return vlc_h$constants.libvlc_media_player_release$MH();
    }
    public static void libvlc_media_player_release (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            vlc_h$constants.libvlc_media_player_release$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_retain$MH() {
        return vlc_h$constants.libvlc_media_player_retain$MH();
    }
    public static void libvlc_media_player_retain (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            vlc_h$constants.libvlc_media_player_retain$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_media$MH() {
        return vlc_h$constants.libvlc_media_player_set_media$MH();
    }
    public static void libvlc_media_player_set_media (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            vlc_h$constants.libvlc_media_player_set_media$MH().invokeExact(p_mi, p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_media$MH() {
        return vlc_h$constants.libvlc_media_player_get_media$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_player_get_media (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_player_get_media$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_event_manager$MH() {
        return vlc_h$constants.libvlc_media_player_event_manager$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_player_event_manager (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_player_event_manager$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_is_playing$MH() {
        return vlc_h$constants.libvlc_media_player_is_playing$MH();
    }
    public static int libvlc_media_player_is_playing (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_is_playing$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_play$MH() {
        return vlc_h$constants.libvlc_media_player_play$MH();
    }
    public static int libvlc_media_player_play (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_play$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_pause$MH() {
        return vlc_h$constants.libvlc_media_player_set_pause$MH();
    }
    public static void libvlc_media_player_set_pause (jdk.incubator.foreign.MemoryAddress mp, int do_pause) {
        try {
            vlc_h$constants.libvlc_media_player_set_pause$MH().invokeExact(mp, do_pause);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_pause$MH() {
        return vlc_h$constants.libvlc_media_player_pause$MH();
    }
    public static void libvlc_media_player_pause (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            vlc_h$constants.libvlc_media_player_pause$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_stop$MH() {
        return vlc_h$constants.libvlc_media_player_stop$MH();
    }
    public static void libvlc_media_player_stop (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            vlc_h$constants.libvlc_media_player_stop$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_renderer$MH() {
        return vlc_h$constants.libvlc_media_player_set_renderer$MH();
    }
    public static int libvlc_media_player_set_renderer (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress p_item) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_set_renderer$MH().invokeExact(p_mi, p_item);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_callbacks$MH() {
        return vlc_h$constants.libvlc_video_set_callbacks$MH();
    }
    public static void libvlc_video_set_callbacks (jdk.incubator.foreign.MemoryAddress mp, jdk.incubator.foreign.MemoryAddress lock, jdk.incubator.foreign.MemoryAddress unlock, jdk.incubator.foreign.MemoryAddress display, jdk.incubator.foreign.MemoryAddress opaque) {
        try {
            vlc_h$constants.libvlc_video_set_callbacks$MH().invokeExact(mp, lock, unlock, display, opaque);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public interface libvlc_video_set_callbacks$lock {
        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static MemorySegment allocate(libvlc_video_set_callbacks$lock fi) {
            return RuntimeHelper.upcallStub(libvlc_video_set_callbacks$lock.class, fi, vlc_h$constants.libvlc_video_set_callbacks$lock$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static MemoryAddress allocate(libvlc_video_set_callbacks$lock fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface libvlc_video_set_callbacks$unlock {
        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        public static MemorySegment allocate(libvlc_video_set_callbacks$unlock fi) {
            return RuntimeHelper.upcallStub(libvlc_video_set_callbacks$unlock.class, fi, vlc_h$constants.libvlc_video_set_callbacks$unlock$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static MemoryAddress allocate(libvlc_video_set_callbacks$unlock fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface libvlc_video_set_callbacks$display {
        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static MemorySegment allocate(libvlc_video_set_callbacks$display fi) {
            return RuntimeHelper.upcallStub(libvlc_video_set_callbacks$display.class, fi, vlc_h$constants.libvlc_video_set_callbacks$display$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static MemoryAddress allocate(libvlc_video_set_callbacks$display fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public static MethodHandle libvlc_video_set_format$MH() {
        return vlc_h$constants.libvlc_video_set_format$MH();
    }
    public static void libvlc_video_set_format (jdk.incubator.foreign.MemoryAddress mp, jdk.incubator.foreign.MemoryAddress chroma, int width, int height, int pitch) {
        try {
            vlc_h$constants.libvlc_video_set_format$MH().invokeExact(mp, chroma, width, height, pitch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_format_callbacks$MH() {
        return vlc_h$constants.libvlc_video_set_format_callbacks$MH();
    }
    public static void libvlc_video_set_format_callbacks (jdk.incubator.foreign.MemoryAddress mp, jdk.incubator.foreign.MemoryAddress setup, jdk.incubator.foreign.MemoryAddress cleanup) {
        try {
            vlc_h$constants.libvlc_video_set_format_callbacks$MH().invokeExact(mp, setup, cleanup);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public interface libvlc_video_set_format_callbacks$setup {
        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        public static MemorySegment allocate(libvlc_video_set_format_callbacks$setup fi) {
            return RuntimeHelper.upcallStub(libvlc_video_set_format_callbacks$setup.class, fi, vlc_h$constants.libvlc_video_set_format_callbacks$setup$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static MemoryAddress allocate(libvlc_video_set_format_callbacks$setup fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface libvlc_video_set_format_callbacks$cleanup {
        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static MemorySegment allocate(libvlc_video_set_format_callbacks$cleanup fi) {
            return RuntimeHelper.upcallStub(libvlc_video_set_format_callbacks$cleanup.class, fi, vlc_h$constants.libvlc_video_set_format_callbacks$cleanup$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static MemoryAddress allocate(libvlc_video_set_format_callbacks$cleanup fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public static MethodHandle libvlc_media_player_set_nsobject$MH() {
        return vlc_h$constants.libvlc_media_player_set_nsobject$MH();
    }
    public static void libvlc_media_player_set_nsobject (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress drawable) {
        try {
            vlc_h$constants.libvlc_media_player_set_nsobject$MH().invokeExact(p_mi, drawable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_nsobject$MH() {
        return vlc_h$constants.libvlc_media_player_get_nsobject$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_player_get_nsobject (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_player_get_nsobject$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_xwindow$MH() {
        return vlc_h$constants.libvlc_media_player_set_xwindow$MH();
    }
    public static void libvlc_media_player_set_xwindow (jdk.incubator.foreign.MemoryAddress p_mi, int drawable) {
        try {
            vlc_h$constants.libvlc_media_player_set_xwindow$MH().invokeExact(p_mi, drawable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_xwindow$MH() {
        return vlc_h$constants.libvlc_media_player_get_xwindow$MH();
    }
    public static int libvlc_media_player_get_xwindow (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_get_xwindow$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_hwnd$MH() {
        return vlc_h$constants.libvlc_media_player_set_hwnd$MH();
    }
    public static void libvlc_media_player_set_hwnd (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress drawable) {
        try {
            vlc_h$constants.libvlc_media_player_set_hwnd$MH().invokeExact(p_mi, drawable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_hwnd$MH() {
        return vlc_h$constants.libvlc_media_player_get_hwnd$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_player_get_hwnd (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_player_get_hwnd$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_android_context$MH() {
        return vlc_h$constants.libvlc_media_player_set_android_context$MH();
    }
    public static void libvlc_media_player_set_android_context (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress p_awindow_handler) {
        try {
            vlc_h$constants.libvlc_media_player_set_android_context$MH().invokeExact(p_mi, p_awindow_handler);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_evas_object$MH() {
        return vlc_h$constants.libvlc_media_player_set_evas_object$MH();
    }
    public static int libvlc_media_player_set_evas_object (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress p_evas_object) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_set_evas_object$MH().invokeExact(p_mi, p_evas_object);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_set_callbacks$MH() {
        return vlc_h$constants.libvlc_audio_set_callbacks$MH();
    }
    public static void libvlc_audio_set_callbacks (jdk.incubator.foreign.MemoryAddress mp, jdk.incubator.foreign.MemoryAddress play, jdk.incubator.foreign.MemoryAddress pause, jdk.incubator.foreign.MemoryAddress resume, jdk.incubator.foreign.MemoryAddress flush, jdk.incubator.foreign.MemoryAddress drain, jdk.incubator.foreign.MemoryAddress opaque) {
        try {
            vlc_h$constants.libvlc_audio_set_callbacks$MH().invokeExact(mp, play, pause, resume, flush, drain, opaque);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public interface libvlc_audio_set_callbacks$play {
        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, long x3);
        public static MemorySegment allocate(libvlc_audio_set_callbacks$play fi) {
            return RuntimeHelper.upcallStub(libvlc_audio_set_callbacks$play.class, fi, vlc_h$constants.libvlc_audio_set_callbacks$play$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)V");
        }
        public static MemoryAddress allocate(libvlc_audio_set_callbacks$play fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface libvlc_audio_set_callbacks$pause {
        void apply(jdk.incubator.foreign.MemoryAddress x0, long x1);
        public static MemorySegment allocate(libvlc_audio_set_callbacks$pause fi) {
            return RuntimeHelper.upcallStub(libvlc_audio_set_callbacks$pause.class, fi, vlc_h$constants.libvlc_audio_set_callbacks$pause$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;J)V");
        }
        public static MemoryAddress allocate(libvlc_audio_set_callbacks$pause fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface libvlc_audio_set_callbacks$resume {
        void apply(jdk.incubator.foreign.MemoryAddress x0, long x1);
        public static MemorySegment allocate(libvlc_audio_set_callbacks$resume fi) {
            return RuntimeHelper.upcallStub(libvlc_audio_set_callbacks$resume.class, fi, vlc_h$constants.libvlc_audio_set_callbacks$resume$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;J)V");
        }
        public static MemoryAddress allocate(libvlc_audio_set_callbacks$resume fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface libvlc_audio_set_callbacks$flush {
        void apply(jdk.incubator.foreign.MemoryAddress x0, long x1);
        public static MemorySegment allocate(libvlc_audio_set_callbacks$flush fi) {
            return RuntimeHelper.upcallStub(libvlc_audio_set_callbacks$flush.class, fi, vlc_h$constants.libvlc_audio_set_callbacks$flush$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;J)V");
        }
        public static MemoryAddress allocate(libvlc_audio_set_callbacks$flush fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface libvlc_audio_set_callbacks$drain {
        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static MemorySegment allocate(libvlc_audio_set_callbacks$drain fi) {
            return RuntimeHelper.upcallStub(libvlc_audio_set_callbacks$drain.class, fi, vlc_h$constants.libvlc_audio_set_callbacks$drain$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static MemoryAddress allocate(libvlc_audio_set_callbacks$drain fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public static MethodHandle libvlc_audio_set_volume_callback$MH() {
        return vlc_h$constants.libvlc_audio_set_volume_callback$MH();
    }
    public static void libvlc_audio_set_volume_callback (jdk.incubator.foreign.MemoryAddress mp, jdk.incubator.foreign.MemoryAddress set_volume) {
        try {
            vlc_h$constants.libvlc_audio_set_volume_callback$MH().invokeExact(mp, set_volume);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public interface libvlc_audio_set_volume_callback$set_volume {
        void apply(jdk.incubator.foreign.MemoryAddress x0, float x1, byte x2);
        public static MemorySegment allocate(libvlc_audio_set_volume_callback$set_volume fi) {
            return RuntimeHelper.upcallStub(libvlc_audio_set_volume_callback$set_volume.class, fi, vlc_h$constants.libvlc_audio_set_volume_callback$set_volume$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;FB)V");
        }
        public static MemoryAddress allocate(libvlc_audio_set_volume_callback$set_volume fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public static MethodHandle libvlc_audio_set_format_callbacks$MH() {
        return vlc_h$constants.libvlc_audio_set_format_callbacks$MH();
    }
    public static void libvlc_audio_set_format_callbacks (jdk.incubator.foreign.MemoryAddress mp, jdk.incubator.foreign.MemoryAddress setup, jdk.incubator.foreign.MemoryAddress cleanup) {
        try {
            vlc_h$constants.libvlc_audio_set_format_callbacks$MH().invokeExact(mp, setup, cleanup);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public interface libvlc_audio_set_format_callbacks$setup {
        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        public static MemorySegment allocate(libvlc_audio_set_format_callbacks$setup fi) {
            return RuntimeHelper.upcallStub(libvlc_audio_set_format_callbacks$setup.class, fi, vlc_h$constants.libvlc_audio_set_format_callbacks$setup$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static MemoryAddress allocate(libvlc_audio_set_format_callbacks$setup fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public interface libvlc_audio_set_format_callbacks$cleanup {
        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static MemorySegment allocate(libvlc_audio_set_format_callbacks$cleanup fi) {
            return RuntimeHelper.upcallStub(libvlc_audio_set_format_callbacks$cleanup.class, fi, vlc_h$constants.libvlc_audio_set_format_callbacks$cleanup$DESC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static MemoryAddress allocate(libvlc_audio_set_format_callbacks$cleanup fi, CScope scope) {
            return scope.register(allocate(fi)).baseAddress();
        }
    }
    public static MethodHandle libvlc_audio_set_format$MH() {
        return vlc_h$constants.libvlc_audio_set_format$MH();
    }
    public static void libvlc_audio_set_format (jdk.incubator.foreign.MemoryAddress mp, jdk.incubator.foreign.MemoryAddress format, int rate, int channels) {
        try {
            vlc_h$constants.libvlc_audio_set_format$MH().invokeExact(mp, format, rate, channels);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_length$MH() {
        return vlc_h$constants.libvlc_media_player_get_length$MH();
    }
    public static long libvlc_media_player_get_length (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (long)vlc_h$constants.libvlc_media_player_get_length$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_time$MH() {
        return vlc_h$constants.libvlc_media_player_get_time$MH();
    }
    public static long libvlc_media_player_get_time (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (long)vlc_h$constants.libvlc_media_player_get_time$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_time$MH() {
        return vlc_h$constants.libvlc_media_player_set_time$MH();
    }
    public static void libvlc_media_player_set_time (jdk.incubator.foreign.MemoryAddress p_mi, long i_time) {
        try {
            vlc_h$constants.libvlc_media_player_set_time$MH().invokeExact(p_mi, i_time);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_position$MH() {
        return vlc_h$constants.libvlc_media_player_get_position$MH();
    }
    public static float libvlc_media_player_get_position (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (float)vlc_h$constants.libvlc_media_player_get_position$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_position$MH() {
        return vlc_h$constants.libvlc_media_player_set_position$MH();
    }
    public static void libvlc_media_player_set_position (jdk.incubator.foreign.MemoryAddress p_mi, float f_pos) {
        try {
            vlc_h$constants.libvlc_media_player_set_position$MH().invokeExact(p_mi, f_pos);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_chapter$MH() {
        return vlc_h$constants.libvlc_media_player_set_chapter$MH();
    }
    public static void libvlc_media_player_set_chapter (jdk.incubator.foreign.MemoryAddress p_mi, int i_chapter) {
        try {
            vlc_h$constants.libvlc_media_player_set_chapter$MH().invokeExact(p_mi, i_chapter);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_chapter$MH() {
        return vlc_h$constants.libvlc_media_player_get_chapter$MH();
    }
    public static int libvlc_media_player_get_chapter (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_get_chapter$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_chapter_count$MH() {
        return vlc_h$constants.libvlc_media_player_get_chapter_count$MH();
    }
    public static int libvlc_media_player_get_chapter_count (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_get_chapter_count$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_will_play$MH() {
        return vlc_h$constants.libvlc_media_player_will_play$MH();
    }
    public static int libvlc_media_player_will_play (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_will_play$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_chapter_count_for_title$MH() {
        return vlc_h$constants.libvlc_media_player_get_chapter_count_for_title$MH();
    }
    public static int libvlc_media_player_get_chapter_count_for_title (jdk.incubator.foreign.MemoryAddress p_mi, int i_title) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_get_chapter_count_for_title$MH().invokeExact(p_mi, i_title);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_title$MH() {
        return vlc_h$constants.libvlc_media_player_set_title$MH();
    }
    public static void libvlc_media_player_set_title (jdk.incubator.foreign.MemoryAddress p_mi, int i_title) {
        try {
            vlc_h$constants.libvlc_media_player_set_title$MH().invokeExact(p_mi, i_title);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_title$MH() {
        return vlc_h$constants.libvlc_media_player_get_title$MH();
    }
    public static int libvlc_media_player_get_title (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_get_title$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_title_count$MH() {
        return vlc_h$constants.libvlc_media_player_get_title_count$MH();
    }
    public static int libvlc_media_player_get_title_count (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_get_title_count$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_previous_chapter$MH() {
        return vlc_h$constants.libvlc_media_player_previous_chapter$MH();
    }
    public static void libvlc_media_player_previous_chapter (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            vlc_h$constants.libvlc_media_player_previous_chapter$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_next_chapter$MH() {
        return vlc_h$constants.libvlc_media_player_next_chapter$MH();
    }
    public static void libvlc_media_player_next_chapter (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            vlc_h$constants.libvlc_media_player_next_chapter$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_rate$MH() {
        return vlc_h$constants.libvlc_media_player_get_rate$MH();
    }
    public static float libvlc_media_player_get_rate (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (float)vlc_h$constants.libvlc_media_player_get_rate$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_rate$MH() {
        return vlc_h$constants.libvlc_media_player_set_rate$MH();
    }
    public static int libvlc_media_player_set_rate (jdk.incubator.foreign.MemoryAddress p_mi, float rate) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_set_rate$MH().invokeExact(p_mi, rate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_state$MH() {
        return vlc_h$constants.libvlc_media_player_get_state$MH();
    }
    public static int libvlc_media_player_get_state (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_get_state$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_has_vout$MH() {
        return vlc_h$constants.libvlc_media_player_has_vout$MH();
    }
    public static int libvlc_media_player_has_vout (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_has_vout$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_is_seekable$MH() {
        return vlc_h$constants.libvlc_media_player_is_seekable$MH();
    }
    public static int libvlc_media_player_is_seekable (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_is_seekable$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_can_pause$MH() {
        return vlc_h$constants.libvlc_media_player_can_pause$MH();
    }
    public static int libvlc_media_player_can_pause (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_can_pause$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_program_scrambled$MH() {
        return vlc_h$constants.libvlc_media_player_program_scrambled$MH();
    }
    public static int libvlc_media_player_program_scrambled (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_program_scrambled$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_next_frame$MH() {
        return vlc_h$constants.libvlc_media_player_next_frame$MH();
    }
    public static void libvlc_media_player_next_frame (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            vlc_h$constants.libvlc_media_player_next_frame$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_navigate$MH() {
        return vlc_h$constants.libvlc_media_player_navigate$MH();
    }
    public static void libvlc_media_player_navigate (jdk.incubator.foreign.MemoryAddress p_mi, int navigate) {
        try {
            vlc_h$constants.libvlc_media_player_navigate$MH().invokeExact(p_mi, navigate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_video_title_display$MH() {
        return vlc_h$constants.libvlc_media_player_set_video_title_display$MH();
    }
    public static void libvlc_media_player_set_video_title_display (jdk.incubator.foreign.MemoryAddress p_mi, int position, int timeout) {
        try {
            vlc_h$constants.libvlc_media_player_set_video_title_display$MH().invokeExact(p_mi, position, timeout);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_add_slave$MH() {
        return vlc_h$constants.libvlc_media_player_add_slave$MH();
    }
    public static int libvlc_media_player_add_slave (jdk.incubator.foreign.MemoryAddress p_mi, int i_type, jdk.incubator.foreign.MemoryAddress psz_uri, byte b_select) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_add_slave$MH().invokeExact(p_mi, i_type, psz_uri, b_select);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_track_description_list_release$MH() {
        return vlc_h$constants.libvlc_track_description_list_release$MH();
    }
    public static void libvlc_track_description_list_release (jdk.incubator.foreign.MemoryAddress p_track_description) {
        try {
            vlc_h$constants.libvlc_track_description_list_release$MH().invokeExact(p_track_description);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_toggle_fullscreen$MH() {
        return vlc_h$constants.libvlc_toggle_fullscreen$MH();
    }
    public static void libvlc_toggle_fullscreen (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            vlc_h$constants.libvlc_toggle_fullscreen$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_set_fullscreen$MH() {
        return vlc_h$constants.libvlc_set_fullscreen$MH();
    }
    public static void libvlc_set_fullscreen (jdk.incubator.foreign.MemoryAddress p_mi, int b_fullscreen) {
        try {
            vlc_h$constants.libvlc_set_fullscreen$MH().invokeExact(p_mi, b_fullscreen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_get_fullscreen$MH() {
        return vlc_h$constants.libvlc_get_fullscreen$MH();
    }
    public static int libvlc_get_fullscreen (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_get_fullscreen$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_key_input$MH() {
        return vlc_h$constants.libvlc_video_set_key_input$MH();
    }
    public static void libvlc_video_set_key_input (jdk.incubator.foreign.MemoryAddress p_mi, int on) {
        try {
            vlc_h$constants.libvlc_video_set_key_input$MH().invokeExact(p_mi, on);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_mouse_input$MH() {
        return vlc_h$constants.libvlc_video_set_mouse_input$MH();
    }
    public static void libvlc_video_set_mouse_input (jdk.incubator.foreign.MemoryAddress p_mi, int on) {
        try {
            vlc_h$constants.libvlc_video_set_mouse_input$MH().invokeExact(p_mi, on);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_size$MH() {
        return vlc_h$constants.libvlc_video_get_size$MH();
    }
    public static int libvlc_video_get_size (jdk.incubator.foreign.MemoryAddress p_mi, int num, jdk.incubator.foreign.MemoryAddress px, jdk.incubator.foreign.MemoryAddress py) {
        try {
            return (int)vlc_h$constants.libvlc_video_get_size$MH().invokeExact(p_mi, num, px, py);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_cursor$MH() {
        return vlc_h$constants.libvlc_video_get_cursor$MH();
    }
    public static int libvlc_video_get_cursor (jdk.incubator.foreign.MemoryAddress p_mi, int num, jdk.incubator.foreign.MemoryAddress px, jdk.incubator.foreign.MemoryAddress py) {
        try {
            return (int)vlc_h$constants.libvlc_video_get_cursor$MH().invokeExact(p_mi, num, px, py);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_scale$MH() {
        return vlc_h$constants.libvlc_video_get_scale$MH();
    }
    public static float libvlc_video_get_scale (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (float)vlc_h$constants.libvlc_video_get_scale$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_scale$MH() {
        return vlc_h$constants.libvlc_video_set_scale$MH();
    }
    public static void libvlc_video_set_scale (jdk.incubator.foreign.MemoryAddress p_mi, float f_factor) {
        try {
            vlc_h$constants.libvlc_video_set_scale$MH().invokeExact(p_mi, f_factor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_aspect_ratio$MH() {
        return vlc_h$constants.libvlc_video_get_aspect_ratio$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_video_get_aspect_ratio (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_video_get_aspect_ratio$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_aspect_ratio$MH() {
        return vlc_h$constants.libvlc_video_set_aspect_ratio$MH();
    }
    public static void libvlc_video_set_aspect_ratio (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress psz_aspect) {
        try {
            vlc_h$constants.libvlc_video_set_aspect_ratio$MH().invokeExact(p_mi, psz_aspect);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_new_viewpoint$MH() {
        return vlc_h$constants.libvlc_video_new_viewpoint$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_video_new_viewpoint () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_video_new_viewpoint$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_update_viewpoint$MH() {
        return vlc_h$constants.libvlc_video_update_viewpoint$MH();
    }
    public static int libvlc_video_update_viewpoint (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress p_viewpoint, byte b_absolute) {
        try {
            return (int)vlc_h$constants.libvlc_video_update_viewpoint$MH().invokeExact(p_mi, p_viewpoint, b_absolute);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_spu$MH() {
        return vlc_h$constants.libvlc_video_get_spu$MH();
    }
    public static int libvlc_video_get_spu (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_video_get_spu$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_spu_count$MH() {
        return vlc_h$constants.libvlc_video_get_spu_count$MH();
    }
    public static int libvlc_video_get_spu_count (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_video_get_spu_count$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_spu_description$MH() {
        return vlc_h$constants.libvlc_video_get_spu_description$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_video_get_spu_description (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_video_get_spu_description$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_spu$MH() {
        return vlc_h$constants.libvlc_video_set_spu$MH();
    }
    public static int libvlc_video_set_spu (jdk.incubator.foreign.MemoryAddress p_mi, int i_spu) {
        try {
            return (int)vlc_h$constants.libvlc_video_set_spu$MH().invokeExact(p_mi, i_spu);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_spu_delay$MH() {
        return vlc_h$constants.libvlc_video_get_spu_delay$MH();
    }
    public static long libvlc_video_get_spu_delay (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (long)vlc_h$constants.libvlc_video_get_spu_delay$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_spu_delay$MH() {
        return vlc_h$constants.libvlc_video_set_spu_delay$MH();
    }
    public static int libvlc_video_set_spu_delay (jdk.incubator.foreign.MemoryAddress p_mi, long i_delay) {
        try {
            return (int)vlc_h$constants.libvlc_video_set_spu_delay$MH().invokeExact(p_mi, i_delay);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_full_title_descriptions$MH() {
        return vlc_h$constants.libvlc_media_player_get_full_title_descriptions$MH();
    }
    public static int libvlc_media_player_get_full_title_descriptions (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress titles) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_get_full_title_descriptions$MH().invokeExact(p_mi, titles);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_title_descriptions_release$MH() {
        return vlc_h$constants.libvlc_title_descriptions_release$MH();
    }
    public static void libvlc_title_descriptions_release (jdk.incubator.foreign.MemoryAddress p_titles, int i_count) {
        try {
            vlc_h$constants.libvlc_title_descriptions_release$MH().invokeExact(p_titles, i_count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_full_chapter_descriptions$MH() {
        return vlc_h$constants.libvlc_media_player_get_full_chapter_descriptions$MH();
    }
    public static int libvlc_media_player_get_full_chapter_descriptions (jdk.incubator.foreign.MemoryAddress p_mi, int i_chapters_of_title, jdk.incubator.foreign.MemoryAddress pp_chapters) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_get_full_chapter_descriptions$MH().invokeExact(p_mi, i_chapters_of_title, pp_chapters);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_chapter_descriptions_release$MH() {
        return vlc_h$constants.libvlc_chapter_descriptions_release$MH();
    }
    public static void libvlc_chapter_descriptions_release (jdk.incubator.foreign.MemoryAddress p_chapters, int i_count) {
        try {
            vlc_h$constants.libvlc_chapter_descriptions_release$MH().invokeExact(p_chapters, i_count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_crop_geometry$MH() {
        return vlc_h$constants.libvlc_video_get_crop_geometry$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_video_get_crop_geometry (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_video_get_crop_geometry$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_crop_geometry$MH() {
        return vlc_h$constants.libvlc_video_set_crop_geometry$MH();
    }
    public static void libvlc_video_set_crop_geometry (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress psz_geometry) {
        try {
            vlc_h$constants.libvlc_video_set_crop_geometry$MH().invokeExact(p_mi, psz_geometry);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_teletext$MH() {
        return vlc_h$constants.libvlc_video_get_teletext$MH();
    }
    public static int libvlc_video_get_teletext (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_video_get_teletext$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_teletext$MH() {
        return vlc_h$constants.libvlc_video_set_teletext$MH();
    }
    public static void libvlc_video_set_teletext (jdk.incubator.foreign.MemoryAddress p_mi, int i_page) {
        try {
            vlc_h$constants.libvlc_video_set_teletext$MH().invokeExact(p_mi, i_page);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_track_count$MH() {
        return vlc_h$constants.libvlc_video_get_track_count$MH();
    }
    public static int libvlc_video_get_track_count (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_video_get_track_count$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_track_description$MH() {
        return vlc_h$constants.libvlc_video_get_track_description$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_video_get_track_description (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_video_get_track_description$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_track$MH() {
        return vlc_h$constants.libvlc_video_get_track$MH();
    }
    public static int libvlc_video_get_track (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_video_get_track$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_track$MH() {
        return vlc_h$constants.libvlc_video_set_track$MH();
    }
    public static int libvlc_video_set_track (jdk.incubator.foreign.MemoryAddress p_mi, int i_track) {
        try {
            return (int)vlc_h$constants.libvlc_video_set_track$MH().invokeExact(p_mi, i_track);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_take_snapshot$MH() {
        return vlc_h$constants.libvlc_video_take_snapshot$MH();
    }
    public static int libvlc_video_take_snapshot (jdk.incubator.foreign.MemoryAddress p_mi, int num, jdk.incubator.foreign.MemoryAddress psz_filepath, int i_width, int i_height) {
        try {
            return (int)vlc_h$constants.libvlc_video_take_snapshot$MH().invokeExact(p_mi, num, psz_filepath, i_width, i_height);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_deinterlace$MH() {
        return vlc_h$constants.libvlc_video_set_deinterlace$MH();
    }
    public static void libvlc_video_set_deinterlace (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress psz_mode) {
        try {
            vlc_h$constants.libvlc_video_set_deinterlace$MH().invokeExact(p_mi, psz_mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_marquee_int$MH() {
        return vlc_h$constants.libvlc_video_get_marquee_int$MH();
    }
    public static int libvlc_video_get_marquee_int (jdk.incubator.foreign.MemoryAddress p_mi, int option) {
        try {
            return (int)vlc_h$constants.libvlc_video_get_marquee_int$MH().invokeExact(p_mi, option);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_marquee_string$MH() {
        return vlc_h$constants.libvlc_video_get_marquee_string$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_video_get_marquee_string (jdk.incubator.foreign.MemoryAddress p_mi, int option) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_video_get_marquee_string$MH().invokeExact(p_mi, option);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_marquee_int$MH() {
        return vlc_h$constants.libvlc_video_set_marquee_int$MH();
    }
    public static void libvlc_video_set_marquee_int (jdk.incubator.foreign.MemoryAddress p_mi, int option, int i_val) {
        try {
            vlc_h$constants.libvlc_video_set_marquee_int$MH().invokeExact(p_mi, option, i_val);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_marquee_string$MH() {
        return vlc_h$constants.libvlc_video_set_marquee_string$MH();
    }
    public static void libvlc_video_set_marquee_string (jdk.incubator.foreign.MemoryAddress p_mi, int option, jdk.incubator.foreign.MemoryAddress psz_text) {
        try {
            vlc_h$constants.libvlc_video_set_marquee_string$MH().invokeExact(p_mi, option, psz_text);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static int libvlc_logo_enable() {
        return vlc_h$constants.libvlc_logo_enable();
    }
    public static int libvlc_logo_file() {
        return vlc_h$constants.libvlc_logo_file();
    }
    public static int libvlc_logo_x() {
        return vlc_h$constants.libvlc_logo_x();
    }
    public static int libvlc_logo_y() {
        return vlc_h$constants.libvlc_logo_y();
    }
    public static int libvlc_logo_delay() {
        return vlc_h$constants.libvlc_logo_delay();
    }
    public static int libvlc_logo_repeat() {
        return vlc_h$constants.libvlc_logo_repeat();
    }
    public static int libvlc_logo_opacity() {
        return vlc_h$constants.libvlc_logo_opacity();
    }
    public static int libvlc_logo_position() {
        return vlc_h$constants.libvlc_logo_position();
    }
    public static MethodHandle libvlc_video_get_logo_int$MH() {
        return vlc_h$constants.libvlc_video_get_logo_int$MH();
    }
    public static int libvlc_video_get_logo_int (jdk.incubator.foreign.MemoryAddress p_mi, int option) {
        try {
            return (int)vlc_h$constants.libvlc_video_get_logo_int$MH().invokeExact(p_mi, option);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_logo_int$MH() {
        return vlc_h$constants.libvlc_video_set_logo_int$MH();
    }
    public static void libvlc_video_set_logo_int (jdk.incubator.foreign.MemoryAddress p_mi, int option, int value) {
        try {
            vlc_h$constants.libvlc_video_set_logo_int$MH().invokeExact(p_mi, option, value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_logo_string$MH() {
        return vlc_h$constants.libvlc_video_set_logo_string$MH();
    }
    public static void libvlc_video_set_logo_string (jdk.incubator.foreign.MemoryAddress p_mi, int option, jdk.incubator.foreign.MemoryAddress psz_value) {
        try {
            vlc_h$constants.libvlc_video_set_logo_string$MH().invokeExact(p_mi, option, psz_value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static int libvlc_adjust_Enable() {
        return vlc_h$constants.libvlc_adjust_Enable();
    }
    public static int libvlc_adjust_Contrast() {
        return vlc_h$constants.libvlc_adjust_Contrast();
    }
    public static int libvlc_adjust_Brightness() {
        return vlc_h$constants.libvlc_adjust_Brightness();
    }
    public static int libvlc_adjust_Hue() {
        return vlc_h$constants.libvlc_adjust_Hue();
    }
    public static int libvlc_adjust_Saturation() {
        return vlc_h$constants.libvlc_adjust_Saturation();
    }
    public static int libvlc_adjust_Gamma() {
        return vlc_h$constants.libvlc_adjust_Gamma();
    }
    public static MethodHandle libvlc_video_get_adjust_int$MH() {
        return vlc_h$constants.libvlc_video_get_adjust_int$MH();
    }
    public static int libvlc_video_get_adjust_int (jdk.incubator.foreign.MemoryAddress p_mi, int option) {
        try {
            return (int)vlc_h$constants.libvlc_video_get_adjust_int$MH().invokeExact(p_mi, option);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_adjust_int$MH() {
        return vlc_h$constants.libvlc_video_set_adjust_int$MH();
    }
    public static void libvlc_video_set_adjust_int (jdk.incubator.foreign.MemoryAddress p_mi, int option, int value) {
        try {
            vlc_h$constants.libvlc_video_set_adjust_int$MH().invokeExact(p_mi, option, value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_adjust_float$MH() {
        return vlc_h$constants.libvlc_video_get_adjust_float$MH();
    }
    public static float libvlc_video_get_adjust_float (jdk.incubator.foreign.MemoryAddress p_mi, int option) {
        try {
            return (float)vlc_h$constants.libvlc_video_get_adjust_float$MH().invokeExact(p_mi, option);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_adjust_float$MH() {
        return vlc_h$constants.libvlc_video_set_adjust_float$MH();
    }
    public static void libvlc_video_set_adjust_float (jdk.incubator.foreign.MemoryAddress p_mi, int option, float value) {
        try {
            vlc_h$constants.libvlc_video_set_adjust_float$MH().invokeExact(p_mi, option, value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static int libvlc_AudioOutputDevice_Error() {
        return vlc_h$constants.libvlc_AudioOutputDevice_Error();
    }
    public static int libvlc_AudioOutputDevice_Mono() {
        return vlc_h$constants.libvlc_AudioOutputDevice_Mono();
    }
    public static int libvlc_AudioOutputDevice_Stereo() {
        return vlc_h$constants.libvlc_AudioOutputDevice_Stereo();
    }
    public static int libvlc_AudioOutputDevice_2F2R() {
        return vlc_h$constants.libvlc_AudioOutputDevice_2F2R();
    }
    public static int libvlc_AudioOutputDevice_3F2R() {
        return vlc_h$constants.libvlc_AudioOutputDevice_3F2R();
    }
    public static int libvlc_AudioOutputDevice_5_1() {
        return vlc_h$constants.libvlc_AudioOutputDevice_5_1();
    }
    public static int libvlc_AudioOutputDevice_6_1() {
        return vlc_h$constants.libvlc_AudioOutputDevice_6_1();
    }
    public static int libvlc_AudioOutputDevice_7_1() {
        return vlc_h$constants.libvlc_AudioOutputDevice_7_1();
    }
    public static int libvlc_AudioOutputDevice_SPDIF() {
        return vlc_h$constants.libvlc_AudioOutputDevice_SPDIF();
    }
    public static int libvlc_AudioChannel_Error() {
        return vlc_h$constants.libvlc_AudioChannel_Error();
    }
    public static int libvlc_AudioChannel_Stereo() {
        return vlc_h$constants.libvlc_AudioChannel_Stereo();
    }
    public static int libvlc_AudioChannel_RStereo() {
        return vlc_h$constants.libvlc_AudioChannel_RStereo();
    }
    public static int libvlc_AudioChannel_Left() {
        return vlc_h$constants.libvlc_AudioChannel_Left();
    }
    public static int libvlc_AudioChannel_Right() {
        return vlc_h$constants.libvlc_AudioChannel_Right();
    }
    public static int libvlc_AudioChannel_Dolbys() {
        return vlc_h$constants.libvlc_AudioChannel_Dolbys();
    }
    public static MethodHandle libvlc_audio_output_list_get$MH() {
        return vlc_h$constants.libvlc_audio_output_list_get$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_audio_output_list_get (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_audio_output_list_get$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_output_list_release$MH() {
        return vlc_h$constants.libvlc_audio_output_list_release$MH();
    }
    public static void libvlc_audio_output_list_release (jdk.incubator.foreign.MemoryAddress p_list) {
        try {
            vlc_h$constants.libvlc_audio_output_list_release$MH().invokeExact(p_list);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_output_set$MH() {
        return vlc_h$constants.libvlc_audio_output_set$MH();
    }
    public static int libvlc_audio_output_set (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress psz_name) {
        try {
            return (int)vlc_h$constants.libvlc_audio_output_set$MH().invokeExact(p_mi, psz_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_output_device_enum$MH() {
        return vlc_h$constants.libvlc_audio_output_device_enum$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_audio_output_device_enum (jdk.incubator.foreign.MemoryAddress mp) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_audio_output_device_enum$MH().invokeExact(mp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_output_device_list_get$MH() {
        return vlc_h$constants.libvlc_audio_output_device_list_get$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_audio_output_device_list_get (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress aout) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_audio_output_device_list_get$MH().invokeExact(p_instance, aout);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_output_device_list_release$MH() {
        return vlc_h$constants.libvlc_audio_output_device_list_release$MH();
    }
    public static void libvlc_audio_output_device_list_release (jdk.incubator.foreign.MemoryAddress p_list) {
        try {
            vlc_h$constants.libvlc_audio_output_device_list_release$MH().invokeExact(p_list);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_output_device_set$MH() {
        return vlc_h$constants.libvlc_audio_output_device_set$MH();
    }
    public static void libvlc_audio_output_device_set (jdk.incubator.foreign.MemoryAddress mp, jdk.incubator.foreign.MemoryAddress module, jdk.incubator.foreign.MemoryAddress device_id) {
        try {
            vlc_h$constants.libvlc_audio_output_device_set$MH().invokeExact(mp, module, device_id);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_output_device_get$MH() {
        return vlc_h$constants.libvlc_audio_output_device_get$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_audio_output_device_get (jdk.incubator.foreign.MemoryAddress mp) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_audio_output_device_get$MH().invokeExact(mp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_toggle_mute$MH() {
        return vlc_h$constants.libvlc_audio_toggle_mute$MH();
    }
    public static void libvlc_audio_toggle_mute (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            vlc_h$constants.libvlc_audio_toggle_mute$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_get_mute$MH() {
        return vlc_h$constants.libvlc_audio_get_mute$MH();
    }
    public static int libvlc_audio_get_mute (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_audio_get_mute$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_set_mute$MH() {
        return vlc_h$constants.libvlc_audio_set_mute$MH();
    }
    public static void libvlc_audio_set_mute (jdk.incubator.foreign.MemoryAddress p_mi, int status) {
        try {
            vlc_h$constants.libvlc_audio_set_mute$MH().invokeExact(p_mi, status);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_get_volume$MH() {
        return vlc_h$constants.libvlc_audio_get_volume$MH();
    }
    public static int libvlc_audio_get_volume (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_audio_get_volume$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_set_volume$MH() {
        return vlc_h$constants.libvlc_audio_set_volume$MH();
    }
    public static int libvlc_audio_set_volume (jdk.incubator.foreign.MemoryAddress p_mi, int i_volume) {
        try {
            return (int)vlc_h$constants.libvlc_audio_set_volume$MH().invokeExact(p_mi, i_volume);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_get_track_count$MH() {
        return vlc_h$constants.libvlc_audio_get_track_count$MH();
    }
    public static int libvlc_audio_get_track_count (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_audio_get_track_count$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_get_track_description$MH() {
        return vlc_h$constants.libvlc_audio_get_track_description$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_audio_get_track_description (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_audio_get_track_description$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_get_track$MH() {
        return vlc_h$constants.libvlc_audio_get_track$MH();
    }
    public static int libvlc_audio_get_track (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_audio_get_track$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_set_track$MH() {
        return vlc_h$constants.libvlc_audio_set_track$MH();
    }
    public static int libvlc_audio_set_track (jdk.incubator.foreign.MemoryAddress p_mi, int i_track) {
        try {
            return (int)vlc_h$constants.libvlc_audio_set_track$MH().invokeExact(p_mi, i_track);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_get_channel$MH() {
        return vlc_h$constants.libvlc_audio_get_channel$MH();
    }
    public static int libvlc_audio_get_channel (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_audio_get_channel$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_set_channel$MH() {
        return vlc_h$constants.libvlc_audio_set_channel$MH();
    }
    public static int libvlc_audio_set_channel (jdk.incubator.foreign.MemoryAddress p_mi, int channel) {
        try {
            return (int)vlc_h$constants.libvlc_audio_set_channel$MH().invokeExact(p_mi, channel);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_get_delay$MH() {
        return vlc_h$constants.libvlc_audio_get_delay$MH();
    }
    public static long libvlc_audio_get_delay (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (long)vlc_h$constants.libvlc_audio_get_delay$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_set_delay$MH() {
        return vlc_h$constants.libvlc_audio_set_delay$MH();
    }
    public static int libvlc_audio_set_delay (jdk.incubator.foreign.MemoryAddress p_mi, long i_delay) {
        try {
            return (int)vlc_h$constants.libvlc_audio_set_delay$MH().invokeExact(p_mi, i_delay);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_equalizer_get_preset_count$MH() {
        return vlc_h$constants.libvlc_audio_equalizer_get_preset_count$MH();
    }
    public static int libvlc_audio_equalizer_get_preset_count () {
        try {
            return (int)vlc_h$constants.libvlc_audio_equalizer_get_preset_count$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_equalizer_get_preset_name$MH() {
        return vlc_h$constants.libvlc_audio_equalizer_get_preset_name$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_audio_equalizer_get_preset_name (int u_index) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_audio_equalizer_get_preset_name$MH().invokeExact(u_index);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_equalizer_get_band_count$MH() {
        return vlc_h$constants.libvlc_audio_equalizer_get_band_count$MH();
    }
    public static int libvlc_audio_equalizer_get_band_count () {
        try {
            return (int)vlc_h$constants.libvlc_audio_equalizer_get_band_count$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_equalizer_get_band_frequency$MH() {
        return vlc_h$constants.libvlc_audio_equalizer_get_band_frequency$MH();
    }
    public static float libvlc_audio_equalizer_get_band_frequency (int u_index) {
        try {
            return (float)vlc_h$constants.libvlc_audio_equalizer_get_band_frequency$MH().invokeExact(u_index);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_equalizer_new$MH() {
        return vlc_h$constants.libvlc_audio_equalizer_new$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_audio_equalizer_new () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_audio_equalizer_new$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_equalizer_new_from_preset$MH() {
        return vlc_h$constants.libvlc_audio_equalizer_new_from_preset$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_audio_equalizer_new_from_preset (int u_index) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_audio_equalizer_new_from_preset$MH().invokeExact(u_index);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_equalizer_release$MH() {
        return vlc_h$constants.libvlc_audio_equalizer_release$MH();
    }
    public static void libvlc_audio_equalizer_release (jdk.incubator.foreign.MemoryAddress p_equalizer) {
        try {
            vlc_h$constants.libvlc_audio_equalizer_release$MH().invokeExact(p_equalizer);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_equalizer_set_preamp$MH() {
        return vlc_h$constants.libvlc_audio_equalizer_set_preamp$MH();
    }
    public static int libvlc_audio_equalizer_set_preamp (jdk.incubator.foreign.MemoryAddress p_equalizer, float f_preamp) {
        try {
            return (int)vlc_h$constants.libvlc_audio_equalizer_set_preamp$MH().invokeExact(p_equalizer, f_preamp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_equalizer_get_preamp$MH() {
        return vlc_h$constants.libvlc_audio_equalizer_get_preamp$MH();
    }
    public static float libvlc_audio_equalizer_get_preamp (jdk.incubator.foreign.MemoryAddress p_equalizer) {
        try {
            return (float)vlc_h$constants.libvlc_audio_equalizer_get_preamp$MH().invokeExact(p_equalizer);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_equalizer_set_amp_at_index$MH() {
        return vlc_h$constants.libvlc_audio_equalizer_set_amp_at_index$MH();
    }
    public static int libvlc_audio_equalizer_set_amp_at_index (jdk.incubator.foreign.MemoryAddress p_equalizer, float f_amp, int u_band) {
        try {
            return (int)vlc_h$constants.libvlc_audio_equalizer_set_amp_at_index$MH().invokeExact(p_equalizer, f_amp, u_band);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_equalizer_get_amp_at_index$MH() {
        return vlc_h$constants.libvlc_audio_equalizer_get_amp_at_index$MH();
    }
    public static float libvlc_audio_equalizer_get_amp_at_index (jdk.incubator.foreign.MemoryAddress p_equalizer, int u_band) {
        try {
            return (float)vlc_h$constants.libvlc_audio_equalizer_get_amp_at_index$MH().invokeExact(p_equalizer, u_band);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_equalizer$MH() {
        return vlc_h$constants.libvlc_media_player_set_equalizer$MH();
    }
    public static int libvlc_media_player_set_equalizer (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress p_equalizer) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_set_equalizer$MH().invokeExact(p_mi, p_equalizer);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static int libvlc_role_None() {
        return vlc_h$constants.libvlc_role_None();
    }
    public static int libvlc_role_Music() {
        return vlc_h$constants.libvlc_role_Music();
    }
    public static int libvlc_role_Video() {
        return vlc_h$constants.libvlc_role_Video();
    }
    public static int libvlc_role_Communication() {
        return vlc_h$constants.libvlc_role_Communication();
    }
    public static int libvlc_role_Game() {
        return vlc_h$constants.libvlc_role_Game();
    }
    public static int libvlc_role_Notification() {
        return vlc_h$constants.libvlc_role_Notification();
    }
    public static int libvlc_role_Animation() {
        return vlc_h$constants.libvlc_role_Animation();
    }
    public static int libvlc_role_Production() {
        return vlc_h$constants.libvlc_role_Production();
    }
    public static int libvlc_role_Accessibility() {
        return vlc_h$constants.libvlc_role_Accessibility();
    }
    public static int libvlc_role_Test() {
        return vlc_h$constants.libvlc_role_Test();
    }
    public static MethodHandle libvlc_media_player_get_role$MH() {
        return vlc_h$constants.libvlc_media_player_get_role$MH();
    }
    public static int libvlc_media_player_get_role (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_get_role$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_role$MH() {
        return vlc_h$constants.libvlc_media_player_set_role$MH();
    }
    public static int libvlc_media_player_set_role (jdk.incubator.foreign.MemoryAddress p_mi, int role) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_set_role$MH().invokeExact(p_mi, role);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_new$MH() {
        return vlc_h$constants.libvlc_media_list_new$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_list_new (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_list_new$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_release$MH() {
        return vlc_h$constants.libvlc_media_list_release$MH();
    }
    public static void libvlc_media_list_release (jdk.incubator.foreign.MemoryAddress p_ml) {
        try {
            vlc_h$constants.libvlc_media_list_release$MH().invokeExact(p_ml);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_retain$MH() {
        return vlc_h$constants.libvlc_media_list_retain$MH();
    }
    public static void libvlc_media_list_retain (jdk.incubator.foreign.MemoryAddress p_ml) {
        try {
            vlc_h$constants.libvlc_media_list_retain$MH().invokeExact(p_ml);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_set_media$MH() {
        return vlc_h$constants.libvlc_media_list_set_media$MH();
    }
    public static void libvlc_media_list_set_media (jdk.incubator.foreign.MemoryAddress p_ml, jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            vlc_h$constants.libvlc_media_list_set_media$MH().invokeExact(p_ml, p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_media$MH() {
        return vlc_h$constants.libvlc_media_list_media$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_list_media (jdk.incubator.foreign.MemoryAddress p_ml) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_list_media$MH().invokeExact(p_ml);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_add_media$MH() {
        return vlc_h$constants.libvlc_media_list_add_media$MH();
    }
    public static int libvlc_media_list_add_media (jdk.incubator.foreign.MemoryAddress p_ml, jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (int)vlc_h$constants.libvlc_media_list_add_media$MH().invokeExact(p_ml, p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_insert_media$MH() {
        return vlc_h$constants.libvlc_media_list_insert_media$MH();
    }
    public static int libvlc_media_list_insert_media (jdk.incubator.foreign.MemoryAddress p_ml, jdk.incubator.foreign.MemoryAddress p_md, int i_pos) {
        try {
            return (int)vlc_h$constants.libvlc_media_list_insert_media$MH().invokeExact(p_ml, p_md, i_pos);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_remove_index$MH() {
        return vlc_h$constants.libvlc_media_list_remove_index$MH();
    }
    public static int libvlc_media_list_remove_index (jdk.incubator.foreign.MemoryAddress p_ml, int i_pos) {
        try {
            return (int)vlc_h$constants.libvlc_media_list_remove_index$MH().invokeExact(p_ml, i_pos);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_count$MH() {
        return vlc_h$constants.libvlc_media_list_count$MH();
    }
    public static int libvlc_media_list_count (jdk.incubator.foreign.MemoryAddress p_ml) {
        try {
            return (int)vlc_h$constants.libvlc_media_list_count$MH().invokeExact(p_ml);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_item_at_index$MH() {
        return vlc_h$constants.libvlc_media_list_item_at_index$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_list_item_at_index (jdk.incubator.foreign.MemoryAddress p_ml, int i_pos) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_list_item_at_index$MH().invokeExact(p_ml, i_pos);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_index_of_item$MH() {
        return vlc_h$constants.libvlc_media_list_index_of_item$MH();
    }
    public static int libvlc_media_list_index_of_item (jdk.incubator.foreign.MemoryAddress p_ml, jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (int)vlc_h$constants.libvlc_media_list_index_of_item$MH().invokeExact(p_ml, p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_is_readonly$MH() {
        return vlc_h$constants.libvlc_media_list_is_readonly$MH();
    }
    public static int libvlc_media_list_is_readonly (jdk.incubator.foreign.MemoryAddress p_ml) {
        try {
            return (int)vlc_h$constants.libvlc_media_list_is_readonly$MH().invokeExact(p_ml);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_lock$MH() {
        return vlc_h$constants.libvlc_media_list_lock$MH();
    }
    public static void libvlc_media_list_lock (jdk.incubator.foreign.MemoryAddress p_ml) {
        try {
            vlc_h$constants.libvlc_media_list_lock$MH().invokeExact(p_ml);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_unlock$MH() {
        return vlc_h$constants.libvlc_media_list_unlock$MH();
    }
    public static void libvlc_media_list_unlock (jdk.incubator.foreign.MemoryAddress p_ml) {
        try {
            vlc_h$constants.libvlc_media_list_unlock$MH().invokeExact(p_ml);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_event_manager$MH() {
        return vlc_h$constants.libvlc_media_list_event_manager$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_list_event_manager (jdk.incubator.foreign.MemoryAddress p_ml) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_list_event_manager$MH().invokeExact(p_ml);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static int libvlc_playback_mode_default() {
        return vlc_h$constants.libvlc_playback_mode_default();
    }
    public static int libvlc_playback_mode_loop() {
        return vlc_h$constants.libvlc_playback_mode_loop();
    }
    public static int libvlc_playback_mode_repeat() {
        return vlc_h$constants.libvlc_playback_mode_repeat();
    }
    public static MethodHandle libvlc_media_list_player_new$MH() {
        return vlc_h$constants.libvlc_media_list_player_new$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_list_player_new (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_list_player_new$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_release$MH() {
        return vlc_h$constants.libvlc_media_list_player_release$MH();
    }
    public static void libvlc_media_list_player_release (jdk.incubator.foreign.MemoryAddress p_mlp) {
        try {
            vlc_h$constants.libvlc_media_list_player_release$MH().invokeExact(p_mlp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_retain$MH() {
        return vlc_h$constants.libvlc_media_list_player_retain$MH();
    }
    public static void libvlc_media_list_player_retain (jdk.incubator.foreign.MemoryAddress p_mlp) {
        try {
            vlc_h$constants.libvlc_media_list_player_retain$MH().invokeExact(p_mlp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_event_manager$MH() {
        return vlc_h$constants.libvlc_media_list_player_event_manager$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_list_player_event_manager (jdk.incubator.foreign.MemoryAddress p_mlp) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_list_player_event_manager$MH().invokeExact(p_mlp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_set_media_player$MH() {
        return vlc_h$constants.libvlc_media_list_player_set_media_player$MH();
    }
    public static void libvlc_media_list_player_set_media_player (jdk.incubator.foreign.MemoryAddress p_mlp, jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            vlc_h$constants.libvlc_media_list_player_set_media_player$MH().invokeExact(p_mlp, p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_get_media_player$MH() {
        return vlc_h$constants.libvlc_media_list_player_get_media_player$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_list_player_get_media_player (jdk.incubator.foreign.MemoryAddress p_mlp) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_list_player_get_media_player$MH().invokeExact(p_mlp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_set_media_list$MH() {
        return vlc_h$constants.libvlc_media_list_player_set_media_list$MH();
    }
    public static void libvlc_media_list_player_set_media_list (jdk.incubator.foreign.MemoryAddress p_mlp, jdk.incubator.foreign.MemoryAddress p_mlist) {
        try {
            vlc_h$constants.libvlc_media_list_player_set_media_list$MH().invokeExact(p_mlp, p_mlist);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_play$MH() {
        return vlc_h$constants.libvlc_media_list_player_play$MH();
    }
    public static void libvlc_media_list_player_play (jdk.incubator.foreign.MemoryAddress p_mlp) {
        try {
            vlc_h$constants.libvlc_media_list_player_play$MH().invokeExact(p_mlp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_pause$MH() {
        return vlc_h$constants.libvlc_media_list_player_pause$MH();
    }
    public static void libvlc_media_list_player_pause (jdk.incubator.foreign.MemoryAddress p_mlp) {
        try {
            vlc_h$constants.libvlc_media_list_player_pause$MH().invokeExact(p_mlp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_set_pause$MH() {
        return vlc_h$constants.libvlc_media_list_player_set_pause$MH();
    }
    public static void libvlc_media_list_player_set_pause (jdk.incubator.foreign.MemoryAddress p_mlp, int do_pause) {
        try {
            vlc_h$constants.libvlc_media_list_player_set_pause$MH().invokeExact(p_mlp, do_pause);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_is_playing$MH() {
        return vlc_h$constants.libvlc_media_list_player_is_playing$MH();
    }
    public static int libvlc_media_list_player_is_playing (jdk.incubator.foreign.MemoryAddress p_mlp) {
        try {
            return (int)vlc_h$constants.libvlc_media_list_player_is_playing$MH().invokeExact(p_mlp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_get_state$MH() {
        return vlc_h$constants.libvlc_media_list_player_get_state$MH();
    }
    public static int libvlc_media_list_player_get_state (jdk.incubator.foreign.MemoryAddress p_mlp) {
        try {
            return (int)vlc_h$constants.libvlc_media_list_player_get_state$MH().invokeExact(p_mlp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_play_item_at_index$MH() {
        return vlc_h$constants.libvlc_media_list_player_play_item_at_index$MH();
    }
    public static int libvlc_media_list_player_play_item_at_index (jdk.incubator.foreign.MemoryAddress p_mlp, int i_index) {
        try {
            return (int)vlc_h$constants.libvlc_media_list_player_play_item_at_index$MH().invokeExact(p_mlp, i_index);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_play_item$MH() {
        return vlc_h$constants.libvlc_media_list_player_play_item$MH();
    }
    public static int libvlc_media_list_player_play_item (jdk.incubator.foreign.MemoryAddress p_mlp, jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (int)vlc_h$constants.libvlc_media_list_player_play_item$MH().invokeExact(p_mlp, p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_stop$MH() {
        return vlc_h$constants.libvlc_media_list_player_stop$MH();
    }
    public static void libvlc_media_list_player_stop (jdk.incubator.foreign.MemoryAddress p_mlp) {
        try {
            vlc_h$constants.libvlc_media_list_player_stop$MH().invokeExact(p_mlp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_next$MH() {
        return vlc_h$constants.libvlc_media_list_player_next$MH();
    }
    public static int libvlc_media_list_player_next (jdk.incubator.foreign.MemoryAddress p_mlp) {
        try {
            return (int)vlc_h$constants.libvlc_media_list_player_next$MH().invokeExact(p_mlp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_previous$MH() {
        return vlc_h$constants.libvlc_media_list_player_previous$MH();
    }
    public static int libvlc_media_list_player_previous (jdk.incubator.foreign.MemoryAddress p_mlp) {
        try {
            return (int)vlc_h$constants.libvlc_media_list_player_previous$MH().invokeExact(p_mlp);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_player_set_playback_mode$MH() {
        return vlc_h$constants.libvlc_media_list_player_set_playback_mode$MH();
    }
    public static void libvlc_media_list_player_set_playback_mode (jdk.incubator.foreign.MemoryAddress p_mlp, int e_mode) {
        try {
            vlc_h$constants.libvlc_media_list_player_set_playback_mode$MH().invokeExact(p_mlp, e_mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_library_new$MH() {
        return vlc_h$constants.libvlc_media_library_new$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_library_new (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_library_new$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_library_release$MH() {
        return vlc_h$constants.libvlc_media_library_release$MH();
    }
    public static void libvlc_media_library_release (jdk.incubator.foreign.MemoryAddress p_mlib) {
        try {
            vlc_h$constants.libvlc_media_library_release$MH().invokeExact(p_mlib);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_library_retain$MH() {
        return vlc_h$constants.libvlc_media_library_retain$MH();
    }
    public static void libvlc_media_library_retain (jdk.incubator.foreign.MemoryAddress p_mlib) {
        try {
            vlc_h$constants.libvlc_media_library_retain$MH().invokeExact(p_mlib);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_library_load$MH() {
        return vlc_h$constants.libvlc_media_library_load$MH();
    }
    public static int libvlc_media_library_load (jdk.incubator.foreign.MemoryAddress p_mlib) {
        try {
            return (int)vlc_h$constants.libvlc_media_library_load$MH().invokeExact(p_mlib);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_library_media_list$MH() {
        return vlc_h$constants.libvlc_media_library_media_list$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_library_media_list (jdk.incubator.foreign.MemoryAddress p_mlib) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_library_media_list$MH().invokeExact(p_mlib);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static int libvlc_media_discoverer_devices() {
        return vlc_h$constants.libvlc_media_discoverer_devices();
    }
    public static int libvlc_media_discoverer_lan() {
        return vlc_h$constants.libvlc_media_discoverer_lan();
    }
    public static int libvlc_media_discoverer_podcasts() {
        return vlc_h$constants.libvlc_media_discoverer_podcasts();
    }
    public static int libvlc_media_discoverer_localdirs() {
        return vlc_h$constants.libvlc_media_discoverer_localdirs();
    }
    public static MethodHandle libvlc_media_discoverer_new$MH() {
        return vlc_h$constants.libvlc_media_discoverer_new$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_discoverer_new (jdk.incubator.foreign.MemoryAddress p_inst, jdk.incubator.foreign.MemoryAddress psz_name) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_discoverer_new$MH().invokeExact(p_inst, psz_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_discoverer_start$MH() {
        return vlc_h$constants.libvlc_media_discoverer_start$MH();
    }
    public static int libvlc_media_discoverer_start (jdk.incubator.foreign.MemoryAddress p_mdis) {
        try {
            return (int)vlc_h$constants.libvlc_media_discoverer_start$MH().invokeExact(p_mdis);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_discoverer_stop$MH() {
        return vlc_h$constants.libvlc_media_discoverer_stop$MH();
    }
    public static void libvlc_media_discoverer_stop (jdk.incubator.foreign.MemoryAddress p_mdis) {
        try {
            vlc_h$constants.libvlc_media_discoverer_stop$MH().invokeExact(p_mdis);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_discoverer_release$MH() {
        return vlc_h$constants.libvlc_media_discoverer_release$MH();
    }
    public static void libvlc_media_discoverer_release (jdk.incubator.foreign.MemoryAddress p_mdis) {
        try {
            vlc_h$constants.libvlc_media_discoverer_release$MH().invokeExact(p_mdis);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_discoverer_media_list$MH() {
        return vlc_h$constants.libvlc_media_discoverer_media_list$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_discoverer_media_list (jdk.incubator.foreign.MemoryAddress p_mdis) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_discoverer_media_list$MH().invokeExact(p_mdis);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_discoverer_is_running$MH() {
        return vlc_h$constants.libvlc_media_discoverer_is_running$MH();
    }
    public static int libvlc_media_discoverer_is_running (jdk.incubator.foreign.MemoryAddress p_mdis) {
        try {
            return (int)vlc_h$constants.libvlc_media_discoverer_is_running$MH().invokeExact(p_mdis);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_discoverer_list_get$MH() {
        return vlc_h$constants.libvlc_media_discoverer_list_get$MH();
    }
    public static long libvlc_media_discoverer_list_get (jdk.incubator.foreign.MemoryAddress p_inst, int i_cat, jdk.incubator.foreign.MemoryAddress ppp_services) {
        try {
            return (long)vlc_h$constants.libvlc_media_discoverer_list_get$MH().invokeExact(p_inst, i_cat, ppp_services);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_discoverer_list_release$MH() {
        return vlc_h$constants.libvlc_media_discoverer_list_release$MH();
    }
    public static void libvlc_media_discoverer_list_release (jdk.incubator.foreign.MemoryAddress pp_services, long i_count) {
        try {
            vlc_h$constants.libvlc_media_discoverer_list_release$MH().invokeExact(pp_services, i_count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static int libvlc_MediaMetaChanged() {
        return vlc_h$constants.libvlc_MediaMetaChanged();
    }
    public static int libvlc_MediaSubItemAdded() {
        return vlc_h$constants.libvlc_MediaSubItemAdded();
    }
    public static int libvlc_MediaDurationChanged() {
        return vlc_h$constants.libvlc_MediaDurationChanged();
    }
    public static int libvlc_MediaParsedChanged() {
        return vlc_h$constants.libvlc_MediaParsedChanged();
    }
    public static int libvlc_MediaFreed() {
        return vlc_h$constants.libvlc_MediaFreed();
    }
    public static int libvlc_MediaStateChanged() {
        return vlc_h$constants.libvlc_MediaStateChanged();
    }
    public static int libvlc_MediaSubItemTreeAdded() {
        return vlc_h$constants.libvlc_MediaSubItemTreeAdded();
    }
    public static int libvlc_MediaPlayerMediaChanged() {
        return vlc_h$constants.libvlc_MediaPlayerMediaChanged();
    }
    public static int libvlc_MediaPlayerNothingSpecial() {
        return vlc_h$constants.libvlc_MediaPlayerNothingSpecial();
    }
    public static int libvlc_MediaPlayerOpening() {
        return vlc_h$constants.libvlc_MediaPlayerOpening();
    }
    public static int libvlc_MediaPlayerBuffering() {
        return vlc_h$constants.libvlc_MediaPlayerBuffering();
    }
    public static int libvlc_MediaPlayerPlaying() {
        return vlc_h$constants.libvlc_MediaPlayerPlaying();
    }
    public static int libvlc_MediaPlayerPaused() {
        return vlc_h$constants.libvlc_MediaPlayerPaused();
    }
    public static int libvlc_MediaPlayerStopped() {
        return vlc_h$constants.libvlc_MediaPlayerStopped();
    }
    public static int libvlc_MediaPlayerForward() {
        return vlc_h$constants.libvlc_MediaPlayerForward();
    }
    public static int libvlc_MediaPlayerBackward() {
        return vlc_h$constants.libvlc_MediaPlayerBackward();
    }
    public static int libvlc_MediaPlayerEndReached() {
        return vlc_h$constants.libvlc_MediaPlayerEndReached();
    }
    public static int libvlc_MediaPlayerEncounteredError() {
        return vlc_h$constants.libvlc_MediaPlayerEncounteredError();
    }
    public static int libvlc_MediaPlayerTimeChanged() {
        return vlc_h$constants.libvlc_MediaPlayerTimeChanged();
    }
    public static int libvlc_MediaPlayerPositionChanged() {
        return vlc_h$constants.libvlc_MediaPlayerPositionChanged();
    }
    public static int libvlc_MediaPlayerSeekableChanged() {
        return vlc_h$constants.libvlc_MediaPlayerSeekableChanged();
    }
    public static int libvlc_MediaPlayerPausableChanged() {
        return vlc_h$constants.libvlc_MediaPlayerPausableChanged();
    }
    public static int libvlc_MediaPlayerTitleChanged() {
        return vlc_h$constants.libvlc_MediaPlayerTitleChanged();
    }
    public static int libvlc_MediaPlayerSnapshotTaken() {
        return vlc_h$constants.libvlc_MediaPlayerSnapshotTaken();
    }
    public static int libvlc_MediaPlayerLengthChanged() {
        return vlc_h$constants.libvlc_MediaPlayerLengthChanged();
    }
    public static int libvlc_MediaPlayerVout() {
        return vlc_h$constants.libvlc_MediaPlayerVout();
    }
    public static int libvlc_MediaPlayerScrambledChanged() {
        return vlc_h$constants.libvlc_MediaPlayerScrambledChanged();
    }
    public static int libvlc_MediaPlayerESAdded() {
        return vlc_h$constants.libvlc_MediaPlayerESAdded();
    }
    public static int libvlc_MediaPlayerESDeleted() {
        return vlc_h$constants.libvlc_MediaPlayerESDeleted();
    }
    public static int libvlc_MediaPlayerESSelected() {
        return vlc_h$constants.libvlc_MediaPlayerESSelected();
    }
    public static int libvlc_MediaPlayerCorked() {
        return vlc_h$constants.libvlc_MediaPlayerCorked();
    }
    public static int libvlc_MediaPlayerUncorked() {
        return vlc_h$constants.libvlc_MediaPlayerUncorked();
    }
    public static int libvlc_MediaPlayerMuted() {
        return vlc_h$constants.libvlc_MediaPlayerMuted();
    }
    public static int libvlc_MediaPlayerUnmuted() {
        return vlc_h$constants.libvlc_MediaPlayerUnmuted();
    }
    public static int libvlc_MediaPlayerAudioVolume() {
        return vlc_h$constants.libvlc_MediaPlayerAudioVolume();
    }
    public static int libvlc_MediaPlayerAudioDevice() {
        return vlc_h$constants.libvlc_MediaPlayerAudioDevice();
    }
    public static int libvlc_MediaPlayerChapterChanged() {
        return vlc_h$constants.libvlc_MediaPlayerChapterChanged();
    }
    public static int libvlc_MediaListItemAdded() {
        return vlc_h$constants.libvlc_MediaListItemAdded();
    }
    public static int libvlc_MediaListWillAddItem() {
        return vlc_h$constants.libvlc_MediaListWillAddItem();
    }
    public static int libvlc_MediaListItemDeleted() {
        return vlc_h$constants.libvlc_MediaListItemDeleted();
    }
    public static int libvlc_MediaListWillDeleteItem() {
        return vlc_h$constants.libvlc_MediaListWillDeleteItem();
    }
    public static int libvlc_MediaListEndReached() {
        return vlc_h$constants.libvlc_MediaListEndReached();
    }
    public static int libvlc_MediaListViewItemAdded() {
        return vlc_h$constants.libvlc_MediaListViewItemAdded();
    }
    public static int libvlc_MediaListViewWillAddItem() {
        return vlc_h$constants.libvlc_MediaListViewWillAddItem();
    }
    public static int libvlc_MediaListViewItemDeleted() {
        return vlc_h$constants.libvlc_MediaListViewItemDeleted();
    }
    public static int libvlc_MediaListViewWillDeleteItem() {
        return vlc_h$constants.libvlc_MediaListViewWillDeleteItem();
    }
    public static int libvlc_MediaListPlayerPlayed() {
        return vlc_h$constants.libvlc_MediaListPlayerPlayed();
    }
    public static int libvlc_MediaListPlayerNextItemSet() {
        return vlc_h$constants.libvlc_MediaListPlayerNextItemSet();
    }
    public static int libvlc_MediaListPlayerStopped() {
        return vlc_h$constants.libvlc_MediaListPlayerStopped();
    }
    public static int libvlc_MediaDiscovererStarted() {
        return vlc_h$constants.libvlc_MediaDiscovererStarted();
    }
    public static int libvlc_MediaDiscovererEnded() {
        return vlc_h$constants.libvlc_MediaDiscovererEnded();
    }
    public static int libvlc_RendererDiscovererItemAdded() {
        return vlc_h$constants.libvlc_RendererDiscovererItemAdded();
    }
    public static int libvlc_RendererDiscovererItemDeleted() {
        return vlc_h$constants.libvlc_RendererDiscovererItemDeleted();
    }
    public static int libvlc_VlmMediaAdded() {
        return vlc_h$constants.libvlc_VlmMediaAdded();
    }
    public static int libvlc_VlmMediaRemoved() {
        return vlc_h$constants.libvlc_VlmMediaRemoved();
    }
    public static int libvlc_VlmMediaChanged() {
        return vlc_h$constants.libvlc_VlmMediaChanged();
    }
    public static int libvlc_VlmMediaInstanceStarted() {
        return vlc_h$constants.libvlc_VlmMediaInstanceStarted();
    }
    public static int libvlc_VlmMediaInstanceStopped() {
        return vlc_h$constants.libvlc_VlmMediaInstanceStopped();
    }
    public static int libvlc_VlmMediaInstanceStatusInit() {
        return vlc_h$constants.libvlc_VlmMediaInstanceStatusInit();
    }
    public static int libvlc_VlmMediaInstanceStatusOpening() {
        return vlc_h$constants.libvlc_VlmMediaInstanceStatusOpening();
    }
    public static int libvlc_VlmMediaInstanceStatusPlaying() {
        return vlc_h$constants.libvlc_VlmMediaInstanceStatusPlaying();
    }
    public static int libvlc_VlmMediaInstanceStatusPause() {
        return vlc_h$constants.libvlc_VlmMediaInstanceStatusPause();
    }
    public static int libvlc_VlmMediaInstanceStatusEnd() {
        return vlc_h$constants.libvlc_VlmMediaInstanceStatusEnd();
    }
    public static int libvlc_VlmMediaInstanceStatusError() {
        return vlc_h$constants.libvlc_VlmMediaInstanceStatusError();
    }
    public static int LIBVLC_DIALOG_QUESTION_NORMAL() {
        return vlc_h$constants.LIBVLC_DIALOG_QUESTION_NORMAL();
    }
    public static int LIBVLC_DIALOG_QUESTION_WARNING() {
        return vlc_h$constants.LIBVLC_DIALOG_QUESTION_WARNING();
    }
    public static int LIBVLC_DIALOG_QUESTION_CRITICAL() {
        return vlc_h$constants.LIBVLC_DIALOG_QUESTION_CRITICAL();
    }
    public static MethodHandle libvlc_dialog_set_callbacks$MH() {
        return vlc_h$constants.libvlc_dialog_set_callbacks$MH();
    }
    public static void libvlc_dialog_set_callbacks (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress p_cbs, jdk.incubator.foreign.MemoryAddress p_data) {
        try {
            vlc_h$constants.libvlc_dialog_set_callbacks$MH().invokeExact(p_instance, p_cbs, p_data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_dialog_set_context$MH() {
        return vlc_h$constants.libvlc_dialog_set_context$MH();
    }
    public static void libvlc_dialog_set_context (jdk.incubator.foreign.MemoryAddress p_id, jdk.incubator.foreign.MemoryAddress p_context) {
        try {
            vlc_h$constants.libvlc_dialog_set_context$MH().invokeExact(p_id, p_context);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_dialog_get_context$MH() {
        return vlc_h$constants.libvlc_dialog_get_context$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_dialog_get_context (jdk.incubator.foreign.MemoryAddress p_id) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_dialog_get_context$MH().invokeExact(p_id);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_dialog_post_login$MH() {
        return vlc_h$constants.libvlc_dialog_post_login$MH();
    }
    public static int libvlc_dialog_post_login (jdk.incubator.foreign.MemoryAddress p_id, jdk.incubator.foreign.MemoryAddress psz_username, jdk.incubator.foreign.MemoryAddress psz_password, byte b_store) {
        try {
            return (int)vlc_h$constants.libvlc_dialog_post_login$MH().invokeExact(p_id, psz_username, psz_password, b_store);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_dialog_post_action$MH() {
        return vlc_h$constants.libvlc_dialog_post_action$MH();
    }
    public static int libvlc_dialog_post_action (jdk.incubator.foreign.MemoryAddress p_id, int i_action) {
        try {
            return (int)vlc_h$constants.libvlc_dialog_post_action$MH().invokeExact(p_id, i_action);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_dialog_dismiss$MH() {
        return vlc_h$constants.libvlc_dialog_dismiss$MH();
    }
    public static int libvlc_dialog_dismiss (jdk.incubator.foreign.MemoryAddress p_id) {
        try {
            return (int)vlc_h$constants.libvlc_dialog_dismiss$MH().invokeExact(p_id);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_release$MH() {
        return vlc_h$constants.libvlc_vlm_release$MH();
    }
    public static void libvlc_vlm_release (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            vlc_h$constants.libvlc_vlm_release$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_add_broadcast$MH() {
        return vlc_h$constants.libvlc_vlm_add_broadcast$MH();
    }
    public static int libvlc_vlm_add_broadcast (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, jdk.incubator.foreign.MemoryAddress psz_input, jdk.incubator.foreign.MemoryAddress psz_output, int i_options, jdk.incubator.foreign.MemoryAddress ppsz_options, int b_enabled, int b_loop) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_add_broadcast$MH().invokeExact(p_instance, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_add_vod$MH() {
        return vlc_h$constants.libvlc_vlm_add_vod$MH();
    }
    public static int libvlc_vlm_add_vod (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, jdk.incubator.foreign.MemoryAddress psz_input, int i_options, jdk.incubator.foreign.MemoryAddress ppsz_options, int b_enabled, jdk.incubator.foreign.MemoryAddress psz_mux) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_add_vod$MH().invokeExact(p_instance, psz_name, psz_input, i_options, ppsz_options, b_enabled, psz_mux);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_del_media$MH() {
        return vlc_h$constants.libvlc_vlm_del_media$MH();
    }
    public static int libvlc_vlm_del_media (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_del_media$MH().invokeExact(p_instance, psz_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_set_enabled$MH() {
        return vlc_h$constants.libvlc_vlm_set_enabled$MH();
    }
    public static int libvlc_vlm_set_enabled (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, int b_enabled) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_set_enabled$MH().invokeExact(p_instance, psz_name, b_enabled);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_set_output$MH() {
        return vlc_h$constants.libvlc_vlm_set_output$MH();
    }
    public static int libvlc_vlm_set_output (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, jdk.incubator.foreign.MemoryAddress psz_output) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_set_output$MH().invokeExact(p_instance, psz_name, psz_output);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_set_input$MH() {
        return vlc_h$constants.libvlc_vlm_set_input$MH();
    }
    public static int libvlc_vlm_set_input (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, jdk.incubator.foreign.MemoryAddress psz_input) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_set_input$MH().invokeExact(p_instance, psz_name, psz_input);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_add_input$MH() {
        return vlc_h$constants.libvlc_vlm_add_input$MH();
    }
    public static int libvlc_vlm_add_input (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, jdk.incubator.foreign.MemoryAddress psz_input) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_add_input$MH().invokeExact(p_instance, psz_name, psz_input);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_set_loop$MH() {
        return vlc_h$constants.libvlc_vlm_set_loop$MH();
    }
    public static int libvlc_vlm_set_loop (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, int b_loop) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_set_loop$MH().invokeExact(p_instance, psz_name, b_loop);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_set_mux$MH() {
        return vlc_h$constants.libvlc_vlm_set_mux$MH();
    }
    public static int libvlc_vlm_set_mux (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, jdk.incubator.foreign.MemoryAddress psz_mux) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_set_mux$MH().invokeExact(p_instance, psz_name, psz_mux);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_change_media$MH() {
        return vlc_h$constants.libvlc_vlm_change_media$MH();
    }
    public static int libvlc_vlm_change_media (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, jdk.incubator.foreign.MemoryAddress psz_input, jdk.incubator.foreign.MemoryAddress psz_output, int i_options, jdk.incubator.foreign.MemoryAddress ppsz_options, int b_enabled, int b_loop) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_change_media$MH().invokeExact(p_instance, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_play_media$MH() {
        return vlc_h$constants.libvlc_vlm_play_media$MH();
    }
    public static int libvlc_vlm_play_media (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_play_media$MH().invokeExact(p_instance, psz_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_stop_media$MH() {
        return vlc_h$constants.libvlc_vlm_stop_media$MH();
    }
    public static int libvlc_vlm_stop_media (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_stop_media$MH().invokeExact(p_instance, psz_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_pause_media$MH() {
        return vlc_h$constants.libvlc_vlm_pause_media$MH();
    }
    public static int libvlc_vlm_pause_media (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_pause_media$MH().invokeExact(p_instance, psz_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_seek_media$MH() {
        return vlc_h$constants.libvlc_vlm_seek_media$MH();
    }
    public static int libvlc_vlm_seek_media (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, float f_percentage) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_seek_media$MH().invokeExact(p_instance, psz_name, f_percentage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_show_media$MH() {
        return vlc_h$constants.libvlc_vlm_show_media$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_vlm_show_media (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_vlm_show_media$MH().invokeExact(p_instance, psz_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_get_media_instance_position$MH() {
        return vlc_h$constants.libvlc_vlm_get_media_instance_position$MH();
    }
    public static float libvlc_vlm_get_media_instance_position (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, int i_instance) {
        try {
            return (float)vlc_h$constants.libvlc_vlm_get_media_instance_position$MH().invokeExact(p_instance, psz_name, i_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_get_media_instance_time$MH() {
        return vlc_h$constants.libvlc_vlm_get_media_instance_time$MH();
    }
    public static int libvlc_vlm_get_media_instance_time (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, int i_instance) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_get_media_instance_time$MH().invokeExact(p_instance, psz_name, i_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_get_media_instance_length$MH() {
        return vlc_h$constants.libvlc_vlm_get_media_instance_length$MH();
    }
    public static int libvlc_vlm_get_media_instance_length (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, int i_instance) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_get_media_instance_length$MH().invokeExact(p_instance, psz_name, i_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_get_media_instance_rate$MH() {
        return vlc_h$constants.libvlc_vlm_get_media_instance_rate$MH();
    }
    public static int libvlc_vlm_get_media_instance_rate (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_name, int i_instance) {
        try {
            return (int)vlc_h$constants.libvlc_vlm_get_media_instance_rate$MH().invokeExact(p_instance, psz_name, i_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_vlm_get_event_manager$MH() {
        return vlc_h$constants.libvlc_vlm_get_event_manager$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_vlm_get_event_manager (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_vlm_get_event_manager$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_fps$MH() {
        return vlc_h$constants.libvlc_media_player_get_fps$MH();
    }
    public static float libvlc_media_player_get_fps (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (float)vlc_h$constants.libvlc_media_player_get_fps$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_set_agl$MH() {
        return vlc_h$constants.libvlc_media_player_set_agl$MH();
    }
    public static void libvlc_media_player_set_agl (jdk.incubator.foreign.MemoryAddress p_mi, int drawable) {
        try {
            vlc_h$constants.libvlc_media_player_set_agl$MH().invokeExact(p_mi, drawable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_player_get_agl$MH() {
        return vlc_h$constants.libvlc_media_player_get_agl$MH();
    }
    public static int libvlc_media_player_get_agl (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_media_player_get_agl$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_track_description_release$MH() {
        return vlc_h$constants.libvlc_track_description_release$MH();
    }
    public static void libvlc_track_description_release (jdk.incubator.foreign.MemoryAddress p_track_description) {
        try {
            vlc_h$constants.libvlc_track_description_release$MH().invokeExact(p_track_description);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_height$MH() {
        return vlc_h$constants.libvlc_video_get_height$MH();
    }
    public static int libvlc_video_get_height (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_video_get_height$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_width$MH() {
        return vlc_h$constants.libvlc_video_get_width$MH();
    }
    public static int libvlc_video_get_width (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_video_get_width$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_title_description$MH() {
        return vlc_h$constants.libvlc_video_get_title_description$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_video_get_title_description (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_video_get_title_description$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_get_chapter_description$MH() {
        return vlc_h$constants.libvlc_video_get_chapter_description$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_video_get_chapter_description (jdk.incubator.foreign.MemoryAddress p_mi, int i_title) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_video_get_chapter_description$MH().invokeExact(p_mi, i_title);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_video_set_subtitle_file$MH() {
        return vlc_h$constants.libvlc_video_set_subtitle_file$MH();
    }
    public static int libvlc_video_set_subtitle_file (jdk.incubator.foreign.MemoryAddress p_mi, jdk.incubator.foreign.MemoryAddress psz_subtitle) {
        try {
            return (int)vlc_h$constants.libvlc_video_set_subtitle_file$MH().invokeExact(p_mi, psz_subtitle);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_toggle_teletext$MH() {
        return vlc_h$constants.libvlc_toggle_teletext$MH();
    }
    public static void libvlc_toggle_teletext (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            vlc_h$constants.libvlc_toggle_teletext$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_output_device_count$MH() {
        return vlc_h$constants.libvlc_audio_output_device_count$MH();
    }
    public static int libvlc_audio_output_device_count (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_audio_output) {
        try {
            return (int)vlc_h$constants.libvlc_audio_output_device_count$MH().invokeExact(p_instance, psz_audio_output);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_output_device_longname$MH() {
        return vlc_h$constants.libvlc_audio_output_device_longname$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_audio_output_device_longname (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_output, int i_device) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_audio_output_device_longname$MH().invokeExact(p_instance, psz_output, i_device);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_output_device_id$MH() {
        return vlc_h$constants.libvlc_audio_output_device_id$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_audio_output_device_id (jdk.incubator.foreign.MemoryAddress p_instance, jdk.incubator.foreign.MemoryAddress psz_audio_output, int i_device) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_audio_output_device_id$MH().invokeExact(p_instance, psz_audio_output, i_device);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_output_get_device_type$MH() {
        return vlc_h$constants.libvlc_audio_output_get_device_type$MH();
    }
    public static int libvlc_audio_output_get_device_type (jdk.incubator.foreign.MemoryAddress p_mi) {
        try {
            return (int)vlc_h$constants.libvlc_audio_output_get_device_type$MH().invokeExact(p_mi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_audio_output_set_device_type$MH() {
        return vlc_h$constants.libvlc_audio_output_set_device_type$MH();
    }
    public static void libvlc_audio_output_set_device_type (jdk.incubator.foreign.MemoryAddress p_mp, int device_type) {
        try {
            vlc_h$constants.libvlc_audio_output_set_device_type$MH().invokeExact(p_mp, device_type);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_parse$MH() {
        return vlc_h$constants.libvlc_media_parse$MH();
    }
    public static void libvlc_media_parse (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            vlc_h$constants.libvlc_media_parse$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_parse_async$MH() {
        return vlc_h$constants.libvlc_media_parse_async$MH();
    }
    public static void libvlc_media_parse_async (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            vlc_h$constants.libvlc_media_parse_async$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_is_parsed$MH() {
        return vlc_h$constants.libvlc_media_is_parsed$MH();
    }
    public static int libvlc_media_is_parsed (jdk.incubator.foreign.MemoryAddress p_md) {
        try {
            return (int)vlc_h$constants.libvlc_media_is_parsed$MH().invokeExact(p_md);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_get_tracks_info$MH() {
        return vlc_h$constants.libvlc_media_get_tracks_info$MH();
    }
    public static int libvlc_media_get_tracks_info (jdk.incubator.foreign.MemoryAddress p_md, jdk.incubator.foreign.MemoryAddress tracks) {
        try {
            return (int)vlc_h$constants.libvlc_media_get_tracks_info$MH().invokeExact(p_md, tracks);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_list_add_file_content$MH() {
        return vlc_h$constants.libvlc_media_list_add_file_content$MH();
    }
    public static int libvlc_media_list_add_file_content (jdk.incubator.foreign.MemoryAddress p_ml, jdk.incubator.foreign.MemoryAddress psz_uri) {
        try {
            return (int)vlc_h$constants.libvlc_media_list_add_file_content$MH().invokeExact(p_ml, psz_uri);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_discoverer_new_from_name$MH() {
        return vlc_h$constants.libvlc_media_discoverer_new_from_name$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_discoverer_new_from_name (jdk.incubator.foreign.MemoryAddress p_inst, jdk.incubator.foreign.MemoryAddress psz_name) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_discoverer_new_from_name$MH().invokeExact(p_inst, psz_name);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_discoverer_localized_name$MH() {
        return vlc_h$constants.libvlc_media_discoverer_localized_name$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_discoverer_localized_name (jdk.incubator.foreign.MemoryAddress p_mdis) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_discoverer_localized_name$MH().invokeExact(p_mdis);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_media_discoverer_event_manager$MH() {
        return vlc_h$constants.libvlc_media_discoverer_event_manager$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_media_discoverer_event_manager (jdk.incubator.foreign.MemoryAddress p_mdis) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_media_discoverer_event_manager$MH().invokeExact(p_mdis);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_wait$MH() {
        return vlc_h$constants.libvlc_wait$MH();
    }
    public static void libvlc_wait (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            vlc_h$constants.libvlc_wait$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_get_log_verbosity$MH() {
        return vlc_h$constants.libvlc_get_log_verbosity$MH();
    }
    public static int libvlc_get_log_verbosity (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            return (int)vlc_h$constants.libvlc_get_log_verbosity$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_set_log_verbosity$MH() {
        return vlc_h$constants.libvlc_set_log_verbosity$MH();
    }
    public static void libvlc_set_log_verbosity (jdk.incubator.foreign.MemoryAddress p_instance, int level) {
        try {
            vlc_h$constants.libvlc_set_log_verbosity$MH().invokeExact(p_instance, level);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_log_open$MH() {
        return vlc_h$constants.libvlc_log_open$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_log_open (jdk.incubator.foreign.MemoryAddress p_instance) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_log_open$MH().invokeExact(p_instance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_log_close$MH() {
        return vlc_h$constants.libvlc_log_close$MH();
    }
    public static void libvlc_log_close (jdk.incubator.foreign.MemoryAddress p_log) {
        try {
            vlc_h$constants.libvlc_log_close$MH().invokeExact(p_log);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_log_count$MH() {
        return vlc_h$constants.libvlc_log_count$MH();
    }
    public static int libvlc_log_count (jdk.incubator.foreign.MemoryAddress p_log) {
        try {
            return (int)vlc_h$constants.libvlc_log_count$MH().invokeExact(p_log);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_log_clear$MH() {
        return vlc_h$constants.libvlc_log_clear$MH();
    }
    public static void libvlc_log_clear (jdk.incubator.foreign.MemoryAddress p_log) {
        try {
            vlc_h$constants.libvlc_log_clear$MH().invokeExact(p_log);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_log_get_iterator$MH() {
        return vlc_h$constants.libvlc_log_get_iterator$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_log_get_iterator (jdk.incubator.foreign.MemoryAddress p_log) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_log_get_iterator$MH().invokeExact(p_log);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_log_iterator_free$MH() {
        return vlc_h$constants.libvlc_log_iterator_free$MH();
    }
    public static void libvlc_log_iterator_free (jdk.incubator.foreign.MemoryAddress p_iter) {
        try {
            vlc_h$constants.libvlc_log_iterator_free$MH().invokeExact(p_iter);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_log_iterator_has_next$MH() {
        return vlc_h$constants.libvlc_log_iterator_has_next$MH();
    }
    public static int libvlc_log_iterator_has_next (jdk.incubator.foreign.MemoryAddress p_iter) {
        try {
            return (int)vlc_h$constants.libvlc_log_iterator_has_next$MH().invokeExact(p_iter);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_log_iterator_next$MH() {
        return vlc_h$constants.libvlc_log_iterator_next$MH();
    }
    public static jdk.incubator.foreign.MemoryAddress libvlc_log_iterator_next (jdk.incubator.foreign.MemoryAddress p_iter, jdk.incubator.foreign.MemoryAddress p_buf) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)vlc_h$constants.libvlc_log_iterator_next$MH().invokeExact(p_iter, p_buf);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static MethodHandle libvlc_playlist_play$MH() {
        return vlc_h$constants.libvlc_playlist_play$MH();
    }
    public static void libvlc_playlist_play (jdk.incubator.foreign.MemoryAddress p_instance, int i_id, int i_options, jdk.incubator.foreign.MemoryAddress ppsz_options) {
        try {
            vlc_h$constants.libvlc_playlist_play$MH().invokeExact(p_instance, i_id, i_options, ppsz_options);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static class C__mbstate_t {

        private C__mbstate_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C__mbstate_t$LAYOUT();
        }
        public static MemoryAddress __mbstate8$addr(MemoryAddress addr) {
            return addr.segment().asSlice(0, 128).baseAddress();
        }
        public static VarHandle _mbstateL$VH() {
            return vlc_h$constants._mbstateL$VH();
        }
        public static long _mbstateL$get(MemoryAddress addr) {
            return (long)vlc_h$constants._mbstateL$VH().get(addr);
        }
        public static long _mbstateL$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants._mbstateL$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void _mbstateL$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants._mbstateL$VH().set(addr, x);
        }
        public static void _mbstateL$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants._mbstateL$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class C__darwin_mbstate_t {

        private C__darwin_mbstate_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C__darwin_mbstate_t$LAYOUT();
        }
        public static MemoryAddress __mbstate8$addr(MemoryAddress addr) {
            return addr.segment().asSlice(0, 128).baseAddress();
        }
        public static VarHandle _mbstateL$VH() {
            return vlc_h$constants._mbstateL$VH();
        }
        public static long _mbstateL$get(MemoryAddress addr) {
            return (long)vlc_h$constants._mbstateL$VH().get(addr);
        }
        public static long _mbstateL$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants._mbstateL$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void _mbstateL$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants._mbstateL$VH().set(addr, x);
        }
        public static void _mbstateL$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants._mbstateL$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class C__darwin_pthread_handler_rec {

        private C__darwin_pthread_handler_rec() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C__darwin_pthread_handler_rec$LAYOUT();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class C_opaque_pthread_attr_t {

        private C_opaque_pthread_attr_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C_opaque_pthread_attr_t$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return vlc_h$constants.__sig$VH();
        }
        public static long __sig$get(MemoryAddress addr) {
            return (long)vlc_h$constants.__sig$VH().get(addr);
        }
        public static long __sig$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants.__sig$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants.__sig$VH().set(addr, x);
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants.__sig$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress __opaque$addr(MemoryAddress addr) {
            return addr.segment().asSlice(8, 56).baseAddress();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class C_opaque_pthread_cond_t {

        private C_opaque_pthread_cond_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C_opaque_pthread_cond_t$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return vlc_h$constants.__sig$VH();
        }
        public static long __sig$get(MemoryAddress addr) {
            return (long)vlc_h$constants.__sig$VH().get(addr);
        }
        public static long __sig$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants.__sig$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants.__sig$VH().set(addr, x);
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants.__sig$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress __opaque$addr(MemoryAddress addr) {
            return addr.segment().asSlice(8, 40).baseAddress();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class C_opaque_pthread_condattr_t {

        private C_opaque_pthread_condattr_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C_opaque_pthread_condattr_t$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return vlc_h$constants.__sig$VH();
        }
        public static long __sig$get(MemoryAddress addr) {
            return (long)vlc_h$constants.__sig$VH().get(addr);
        }
        public static long __sig$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants.__sig$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants.__sig$VH().set(addr, x);
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants.__sig$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress __opaque$addr(MemoryAddress addr) {
            return addr.segment().asSlice(8, 8).baseAddress();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class C_opaque_pthread_mutex_t {

        private C_opaque_pthread_mutex_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C_opaque_pthread_mutex_t$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return vlc_h$constants.__sig$VH();
        }
        public static long __sig$get(MemoryAddress addr) {
            return (long)vlc_h$constants.__sig$VH().get(addr);
        }
        public static long __sig$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants.__sig$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants.__sig$VH().set(addr, x);
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants.__sig$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress __opaque$addr(MemoryAddress addr) {
            return addr.segment().asSlice(8, 56).baseAddress();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class C_opaque_pthread_mutexattr_t {

        private C_opaque_pthread_mutexattr_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C_opaque_pthread_mutexattr_t$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return vlc_h$constants.__sig$VH();
        }
        public static long __sig$get(MemoryAddress addr) {
            return (long)vlc_h$constants.__sig$VH().get(addr);
        }
        public static long __sig$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants.__sig$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants.__sig$VH().set(addr, x);
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants.__sig$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress __opaque$addr(MemoryAddress addr) {
            return addr.segment().asSlice(8, 8).baseAddress();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class C_opaque_pthread_once_t {

        private C_opaque_pthread_once_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C_opaque_pthread_once_t$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return vlc_h$constants.__sig$VH();
        }
        public static long __sig$get(MemoryAddress addr) {
            return (long)vlc_h$constants.__sig$VH().get(addr);
        }
        public static long __sig$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants.__sig$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants.__sig$VH().set(addr, x);
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants.__sig$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress __opaque$addr(MemoryAddress addr) {
            return addr.segment().asSlice(8, 8).baseAddress();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class C_opaque_pthread_rwlock_t {

        private C_opaque_pthread_rwlock_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C_opaque_pthread_rwlock_t$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return vlc_h$constants.__sig$VH();
        }
        public static long __sig$get(MemoryAddress addr) {
            return (long)vlc_h$constants.__sig$VH().get(addr);
        }
        public static long __sig$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants.__sig$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants.__sig$VH().set(addr, x);
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants.__sig$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress __opaque$addr(MemoryAddress addr) {
            return addr.segment().asSlice(8, 192).baseAddress();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class C_opaque_pthread_rwlockattr_t {

        private C_opaque_pthread_rwlockattr_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C_opaque_pthread_rwlockattr_t$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return vlc_h$constants.__sig$VH();
        }
        public static long __sig$get(MemoryAddress addr) {
            return (long)vlc_h$constants.__sig$VH().get(addr);
        }
        public static long __sig$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants.__sig$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants.__sig$VH().set(addr, x);
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants.__sig$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress __opaque$addr(MemoryAddress addr) {
            return addr.segment().asSlice(8, 16).baseAddress();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class C_opaque_pthread_t {

        private C_opaque_pthread_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C_opaque_pthread_t$LAYOUT();
        }
        public static VarHandle __sig$VH() {
            return vlc_h$constants.__sig$VH();
        }
        public static long __sig$get(MemoryAddress addr) {
            return (long)vlc_h$constants.__sig$VH().get(addr);
        }
        public static long __sig$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants.__sig$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants.__sig$VH().set(addr, x);
        }
        public static void __sig$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants.__sig$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress __opaque$addr(MemoryAddress addr) {
            return addr.segment().asSlice(16, 8176).baseAddress();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class C__sbuf {

        private C__sbuf() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C__sbuf$LAYOUT();
        }
        public static VarHandle _size$VH() {
            return vlc_h$constants._size$VH();
        }
        public static int _size$get(MemoryAddress addr) {
            return (int)vlc_h$constants._size$VH().get(addr);
        }
        public static int _size$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants._size$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void _size$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants._size$VH().set(addr, x);
        }
        public static void _size$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants._size$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class C__sFILE {

        private C__sFILE() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.C__sFILE$LAYOUT();
        }
        public static VarHandle _r$VH() {
            return vlc_h$constants._r$VH();
        }
        public static int _r$get(MemoryAddress addr) {
            return (int)vlc_h$constants._r$VH().get(addr);
        }
        public static int _r$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants._r$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void _r$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants._r$VH().set(addr, x);
        }
        public static void _r$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants._r$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle _w$VH() {
            return vlc_h$constants._w$VH();
        }
        public static int _w$get(MemoryAddress addr) {
            return (int)vlc_h$constants._w$VH().get(addr);
        }
        public static int _w$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants._w$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void _w$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants._w$VH().set(addr, x);
        }
        public static void _w$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants._w$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle _flags$VH() {
            return vlc_h$constants._flags$VH();
        }
        public static short _flags$get(MemoryAddress addr) {
            return (short)vlc_h$constants._flags$VH().get(addr);
        }
        public static short _flags$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (short)vlc_h$constants._flags$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void _flags$set(jdk.incubator.foreign.MemoryAddress addr, short x) {
            vlc_h$constants._flags$VH().set(addr, x);
        }
        public static void _flags$set(jdk.incubator.foreign.MemoryAddress addr, long index, short x) {
            vlc_h$constants._flags$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle _file$VH() {
            return vlc_h$constants._file$VH();
        }
        public static short _file$get(MemoryAddress addr) {
            return (short)vlc_h$constants._file$VH().get(addr);
        }
        public static short _file$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (short)vlc_h$constants._file$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void _file$set(jdk.incubator.foreign.MemoryAddress addr, short x) {
            vlc_h$constants._file$VH().set(addr, x);
        }
        public static void _file$set(jdk.incubator.foreign.MemoryAddress addr, long index, short x) {
            vlc_h$constants._file$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress _bf$addr(MemoryAddress addr) {
            return addr.segment().asSlice(24, 16).baseAddress();
        }
        public static VarHandle _lbfsize$VH() {
            return vlc_h$constants._lbfsize$VH();
        }
        public static int _lbfsize$get(MemoryAddress addr) {
            return (int)vlc_h$constants._lbfsize$VH().get(addr);
        }
        public static int _lbfsize$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants._lbfsize$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void _lbfsize$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants._lbfsize$VH().set(addr, x);
        }
        public static void _lbfsize$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants._lbfsize$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress _ub$addr(MemoryAddress addr) {
            return addr.segment().asSlice(88, 16).baseAddress();
        }
        public static VarHandle _ur$VH() {
            return vlc_h$constants._ur$VH();
        }
        public static int _ur$get(MemoryAddress addr) {
            return (int)vlc_h$constants._ur$VH().get(addr);
        }
        public static int _ur$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants._ur$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void _ur$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants._ur$VH().set(addr, x);
        }
        public static void _ur$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants._ur$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress _ubuf$addr(MemoryAddress addr) {
            return addr.segment().asSlice(116, 3).baseAddress();
        }
        public static MemoryAddress _nbuf$addr(MemoryAddress addr) {
            return addr.segment().asSlice(119, 1).baseAddress();
        }
        public static MemoryAddress _lb$addr(MemoryAddress addr) {
            return addr.segment().asSlice(120, 16).baseAddress();
        }
        public static VarHandle _blksize$VH() {
            return vlc_h$constants._blksize$VH();
        }
        public static int _blksize$get(MemoryAddress addr) {
            return (int)vlc_h$constants._blksize$VH().get(addr);
        }
        public static int _blksize$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants._blksize$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void _blksize$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants._blksize$VH().set(addr, x);
        }
        public static void _blksize$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants._blksize$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle _offset$VH() {
            return vlc_h$constants._offset$VH();
        }
        public static long _offset$get(MemoryAddress addr) {
            return (long)vlc_h$constants._offset$VH().get(addr);
        }
        public static long _offset$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants._offset$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void _offset$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants._offset$VH().set(addr, x);
        }
        public static void _offset$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants._offset$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_module_description_t {

        private Clibvlc_module_description_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_module_description_t$LAYOUT();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_rd_description_t {

        private Clibvlc_rd_description_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_rd_description_t$LAYOUT();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_media_stats_t {

        private Clibvlc_media_stats_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_media_stats_t$LAYOUT();
        }
        public static VarHandle i_read_bytes$VH() {
            return vlc_h$constants.i_read_bytes$VH();
        }
        public static int i_read_bytes$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_read_bytes$VH().get(addr);
        }
        public static int i_read_bytes$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_read_bytes$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_read_bytes$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_read_bytes$VH().set(addr, x);
        }
        public static void i_read_bytes$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_read_bytes$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle f_input_bitrate$VH() {
            return vlc_h$constants.f_input_bitrate$VH();
        }
        public static float f_input_bitrate$get(MemoryAddress addr) {
            return (float)vlc_h$constants.f_input_bitrate$VH().get(addr);
        }
        public static float f_input_bitrate$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (float)vlc_h$constants.f_input_bitrate$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void f_input_bitrate$set(jdk.incubator.foreign.MemoryAddress addr, float x) {
            vlc_h$constants.f_input_bitrate$VH().set(addr, x);
        }
        public static void f_input_bitrate$set(jdk.incubator.foreign.MemoryAddress addr, long index, float x) {
            vlc_h$constants.f_input_bitrate$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_demux_read_bytes$VH() {
            return vlc_h$constants.i_demux_read_bytes$VH();
        }
        public static int i_demux_read_bytes$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_demux_read_bytes$VH().get(addr);
        }
        public static int i_demux_read_bytes$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_demux_read_bytes$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_demux_read_bytes$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_demux_read_bytes$VH().set(addr, x);
        }
        public static void i_demux_read_bytes$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_demux_read_bytes$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle f_demux_bitrate$VH() {
            return vlc_h$constants.f_demux_bitrate$VH();
        }
        public static float f_demux_bitrate$get(MemoryAddress addr) {
            return (float)vlc_h$constants.f_demux_bitrate$VH().get(addr);
        }
        public static float f_demux_bitrate$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (float)vlc_h$constants.f_demux_bitrate$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void f_demux_bitrate$set(jdk.incubator.foreign.MemoryAddress addr, float x) {
            vlc_h$constants.f_demux_bitrate$VH().set(addr, x);
        }
        public static void f_demux_bitrate$set(jdk.incubator.foreign.MemoryAddress addr, long index, float x) {
            vlc_h$constants.f_demux_bitrate$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_demux_corrupted$VH() {
            return vlc_h$constants.i_demux_corrupted$VH();
        }
        public static int i_demux_corrupted$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_demux_corrupted$VH().get(addr);
        }
        public static int i_demux_corrupted$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_demux_corrupted$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_demux_corrupted$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_demux_corrupted$VH().set(addr, x);
        }
        public static void i_demux_corrupted$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_demux_corrupted$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_demux_discontinuity$VH() {
            return vlc_h$constants.i_demux_discontinuity$VH();
        }
        public static int i_demux_discontinuity$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_demux_discontinuity$VH().get(addr);
        }
        public static int i_demux_discontinuity$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_demux_discontinuity$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_demux_discontinuity$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_demux_discontinuity$VH().set(addr, x);
        }
        public static void i_demux_discontinuity$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_demux_discontinuity$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_decoded_video$VH() {
            return vlc_h$constants.i_decoded_video$VH();
        }
        public static int i_decoded_video$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_decoded_video$VH().get(addr);
        }
        public static int i_decoded_video$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_decoded_video$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_decoded_video$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_decoded_video$VH().set(addr, x);
        }
        public static void i_decoded_video$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_decoded_video$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_decoded_audio$VH() {
            return vlc_h$constants.i_decoded_audio$VH();
        }
        public static int i_decoded_audio$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_decoded_audio$VH().get(addr);
        }
        public static int i_decoded_audio$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_decoded_audio$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_decoded_audio$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_decoded_audio$VH().set(addr, x);
        }
        public static void i_decoded_audio$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_decoded_audio$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_displayed_pictures$VH() {
            return vlc_h$constants.i_displayed_pictures$VH();
        }
        public static int i_displayed_pictures$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_displayed_pictures$VH().get(addr);
        }
        public static int i_displayed_pictures$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_displayed_pictures$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_displayed_pictures$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_displayed_pictures$VH().set(addr, x);
        }
        public static void i_displayed_pictures$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_displayed_pictures$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_lost_pictures$VH() {
            return vlc_h$constants.i_lost_pictures$VH();
        }
        public static int i_lost_pictures$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_lost_pictures$VH().get(addr);
        }
        public static int i_lost_pictures$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_lost_pictures$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_lost_pictures$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_lost_pictures$VH().set(addr, x);
        }
        public static void i_lost_pictures$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_lost_pictures$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_played_abuffers$VH() {
            return vlc_h$constants.i_played_abuffers$VH();
        }
        public static int i_played_abuffers$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_played_abuffers$VH().get(addr);
        }
        public static int i_played_abuffers$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_played_abuffers$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_played_abuffers$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_played_abuffers$VH().set(addr, x);
        }
        public static void i_played_abuffers$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_played_abuffers$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_lost_abuffers$VH() {
            return vlc_h$constants.i_lost_abuffers$VH();
        }
        public static int i_lost_abuffers$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_lost_abuffers$VH().get(addr);
        }
        public static int i_lost_abuffers$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_lost_abuffers$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_lost_abuffers$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_lost_abuffers$VH().set(addr, x);
        }
        public static void i_lost_abuffers$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_lost_abuffers$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_sent_packets$VH() {
            return vlc_h$constants.i_sent_packets$VH();
        }
        public static int i_sent_packets$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_sent_packets$VH().get(addr);
        }
        public static int i_sent_packets$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_sent_packets$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_sent_packets$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_sent_packets$VH().set(addr, x);
        }
        public static void i_sent_packets$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_sent_packets$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_sent_bytes$VH() {
            return vlc_h$constants.i_sent_bytes$VH();
        }
        public static int i_sent_bytes$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_sent_bytes$VH().get(addr);
        }
        public static int i_sent_bytes$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_sent_bytes$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_sent_bytes$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_sent_bytes$VH().set(addr, x);
        }
        public static void i_sent_bytes$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_sent_bytes$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle f_send_bitrate$VH() {
            return vlc_h$constants.f_send_bitrate$VH();
        }
        public static float f_send_bitrate$get(MemoryAddress addr) {
            return (float)vlc_h$constants.f_send_bitrate$VH().get(addr);
        }
        public static float f_send_bitrate$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (float)vlc_h$constants.f_send_bitrate$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void f_send_bitrate$set(jdk.incubator.foreign.MemoryAddress addr, float x) {
            vlc_h$constants.f_send_bitrate$VH().set(addr, x);
        }
        public static void f_send_bitrate$set(jdk.incubator.foreign.MemoryAddress addr, long index, float x) {
            vlc_h$constants.f_send_bitrate$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_media_track_info_t {

        private Clibvlc_media_track_info_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_media_track_info_t$LAYOUT();
        }
        public static VarHandle i_codec$VH() {
            return vlc_h$constants.i_codec$VH();
        }
        public static int i_codec$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_codec$VH().get(addr);
        }
        public static int i_codec$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_codec$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_codec$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_codec$VH().set(addr, x);
        }
        public static void i_codec$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_codec$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_id$VH() {
            return vlc_h$constants.i_id$VH();
        }
        public static int i_id$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_id$VH().get(addr);
        }
        public static int i_id$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_id$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_id$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_id$VH().set(addr, x);
        }
        public static void i_id$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_id$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_type$VH() {
            return vlc_h$constants.i_type$VH();
        }
        public static int i_type$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_type$VH().get(addr);
        }
        public static int i_type$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_type$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_type$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_type$VH().set(addr, x);
        }
        public static void i_type$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_type$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_profile$VH() {
            return vlc_h$constants.i_profile$VH();
        }
        public static int i_profile$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_profile$VH().get(addr);
        }
        public static int i_profile$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_profile$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_profile$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_profile$VH().set(addr, x);
        }
        public static void i_profile$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_profile$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_level$VH() {
            return vlc_h$constants.i_level$VH();
        }
        public static int i_level$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_level$VH().get(addr);
        }
        public static int i_level$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_level$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_level$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_level$VH().set(addr, x);
        }
        public static void i_level$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_level$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress u$addr(MemoryAddress addr) {
            return addr.segment().asSlice(20, 8).baseAddress();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_audio_track_t {

        private Clibvlc_audio_track_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_audio_track_t$LAYOUT();
        }
        public static VarHandle i_channels$VH() {
            return vlc_h$constants.i_channels$VH();
        }
        public static int i_channels$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_channels$VH().get(addr);
        }
        public static int i_channels$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_channels$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_channels$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_channels$VH().set(addr, x);
        }
        public static void i_channels$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_channels$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_rate$VH() {
            return vlc_h$constants.i_rate$VH();
        }
        public static int i_rate$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_rate$VH().get(addr);
        }
        public static int i_rate$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_rate$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_rate$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_rate$VH().set(addr, x);
        }
        public static void i_rate$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_rate$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_video_viewpoint_t {

        private Clibvlc_video_viewpoint_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_video_viewpoint_t$LAYOUT();
        }
        public static VarHandle f_yaw$VH() {
            return vlc_h$constants.f_yaw$VH();
        }
        public static float f_yaw$get(MemoryAddress addr) {
            return (float)vlc_h$constants.f_yaw$VH().get(addr);
        }
        public static float f_yaw$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (float)vlc_h$constants.f_yaw$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void f_yaw$set(jdk.incubator.foreign.MemoryAddress addr, float x) {
            vlc_h$constants.f_yaw$VH().set(addr, x);
        }
        public static void f_yaw$set(jdk.incubator.foreign.MemoryAddress addr, long index, float x) {
            vlc_h$constants.f_yaw$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle f_pitch$VH() {
            return vlc_h$constants.f_pitch$VH();
        }
        public static float f_pitch$get(MemoryAddress addr) {
            return (float)vlc_h$constants.f_pitch$VH().get(addr);
        }
        public static float f_pitch$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (float)vlc_h$constants.f_pitch$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void f_pitch$set(jdk.incubator.foreign.MemoryAddress addr, float x) {
            vlc_h$constants.f_pitch$VH().set(addr, x);
        }
        public static void f_pitch$set(jdk.incubator.foreign.MemoryAddress addr, long index, float x) {
            vlc_h$constants.f_pitch$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle f_roll$VH() {
            return vlc_h$constants.f_roll$VH();
        }
        public static float f_roll$get(MemoryAddress addr) {
            return (float)vlc_h$constants.f_roll$VH().get(addr);
        }
        public static float f_roll$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (float)vlc_h$constants.f_roll$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void f_roll$set(jdk.incubator.foreign.MemoryAddress addr, float x) {
            vlc_h$constants.f_roll$VH().set(addr, x);
        }
        public static void f_roll$set(jdk.incubator.foreign.MemoryAddress addr, long index, float x) {
            vlc_h$constants.f_roll$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle f_field_of_view$VH() {
            return vlc_h$constants.f_field_of_view$VH();
        }
        public static float f_field_of_view$get(MemoryAddress addr) {
            return (float)vlc_h$constants.f_field_of_view$VH().get(addr);
        }
        public static float f_field_of_view$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (float)vlc_h$constants.f_field_of_view$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void f_field_of_view$set(jdk.incubator.foreign.MemoryAddress addr, float x) {
            vlc_h$constants.f_field_of_view$VH().set(addr, x);
        }
        public static void f_field_of_view$set(jdk.incubator.foreign.MemoryAddress addr, long index, float x) {
            vlc_h$constants.f_field_of_view$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_video_track_t {

        private Clibvlc_video_track_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_video_track_t$LAYOUT();
        }
        public static VarHandle i_height$VH() {
            return vlc_h$constants.i_height$VH();
        }
        public static int i_height$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_height$VH().get(addr);
        }
        public static int i_height$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_height$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_height$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_height$VH().set(addr, x);
        }
        public static void i_height$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_height$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_width$VH() {
            return vlc_h$constants.i_width$VH();
        }
        public static int i_width$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_width$VH().get(addr);
        }
        public static int i_width$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_width$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_width$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_width$VH().set(addr, x);
        }
        public static void i_width$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_width$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_sar_num$VH() {
            return vlc_h$constants.i_sar_num$VH();
        }
        public static int i_sar_num$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_sar_num$VH().get(addr);
        }
        public static int i_sar_num$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_sar_num$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_sar_num$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_sar_num$VH().set(addr, x);
        }
        public static void i_sar_num$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_sar_num$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_sar_den$VH() {
            return vlc_h$constants.i_sar_den$VH();
        }
        public static int i_sar_den$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_sar_den$VH().get(addr);
        }
        public static int i_sar_den$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_sar_den$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_sar_den$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_sar_den$VH().set(addr, x);
        }
        public static void i_sar_den$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_sar_den$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_frame_rate_num$VH() {
            return vlc_h$constants.i_frame_rate_num$VH();
        }
        public static int i_frame_rate_num$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_frame_rate_num$VH().get(addr);
        }
        public static int i_frame_rate_num$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_frame_rate_num$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_frame_rate_num$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_frame_rate_num$VH().set(addr, x);
        }
        public static void i_frame_rate_num$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_frame_rate_num$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_frame_rate_den$VH() {
            return vlc_h$constants.i_frame_rate_den$VH();
        }
        public static int i_frame_rate_den$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_frame_rate_den$VH().get(addr);
        }
        public static int i_frame_rate_den$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_frame_rate_den$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_frame_rate_den$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_frame_rate_den$VH().set(addr, x);
        }
        public static void i_frame_rate_den$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_frame_rate_den$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_orientation$VH() {
            return vlc_h$constants.i_orientation$VH();
        }
        public static int i_orientation$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_orientation$VH().get(addr);
        }
        public static int i_orientation$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_orientation$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_orientation$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_orientation$VH().set(addr, x);
        }
        public static void i_orientation$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_orientation$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_projection$VH() {
            return vlc_h$constants.i_projection$VH();
        }
        public static int i_projection$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_projection$VH().get(addr);
        }
        public static int i_projection$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_projection$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_projection$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_projection$VH().set(addr, x);
        }
        public static void i_projection$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_projection$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress pose$addr(MemoryAddress addr) {
            return addr.segment().asSlice(32, 16).baseAddress();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_subtitle_track_t {

        private Clibvlc_subtitle_track_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_subtitle_track_t$LAYOUT();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_media_track_t {

        private Clibvlc_media_track_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_media_track_t$LAYOUT();
        }
        public static VarHandle i_codec$VH() {
            return vlc_h$constants.i_codec$VH();
        }
        public static int i_codec$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_codec$VH().get(addr);
        }
        public static int i_codec$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_codec$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_codec$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_codec$VH().set(addr, x);
        }
        public static void i_codec$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_codec$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_original_fourcc$VH() {
            return vlc_h$constants.i_original_fourcc$VH();
        }
        public static int i_original_fourcc$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_original_fourcc$VH().get(addr);
        }
        public static int i_original_fourcc$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_original_fourcc$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_original_fourcc$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_original_fourcc$VH().set(addr, x);
        }
        public static void i_original_fourcc$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_original_fourcc$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_id$VH() {
            return vlc_h$constants.i_id$VH();
        }
        public static int i_id$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_id$VH().get(addr);
        }
        public static int i_id$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_id$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_id$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_id$VH().set(addr, x);
        }
        public static void i_id$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_id$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_type$VH() {
            return vlc_h$constants.i_type$VH();
        }
        public static int i_type$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_type$VH().get(addr);
        }
        public static int i_type$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_type$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_type$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_type$VH().set(addr, x);
        }
        public static void i_type$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_type$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_profile$VH() {
            return vlc_h$constants.i_profile$VH();
        }
        public static int i_profile$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_profile$VH().get(addr);
        }
        public static int i_profile$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_profile$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_profile$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_profile$VH().set(addr, x);
        }
        public static void i_profile$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_profile$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_level$VH() {
            return vlc_h$constants.i_level$VH();
        }
        public static int i_level$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_level$VH().get(addr);
        }
        public static int i_level$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_level$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_level$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_level$VH().set(addr, x);
        }
        public static void i_level$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_level$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_bitrate$VH() {
            return vlc_h$constants.i_bitrate$VH();
        }
        public static int i_bitrate$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_bitrate$VH().get(addr);
        }
        public static int i_bitrate$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_bitrate$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_bitrate$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_bitrate$VH().set(addr, x);
        }
        public static void i_bitrate$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_bitrate$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_media_slave_t {

        private Clibvlc_media_slave_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_media_slave_t$LAYOUT();
        }
        public static VarHandle i_type$VH() {
            return vlc_h$constants.i_type$VH();
        }
        public static int i_type$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_type$VH().get(addr);
        }
        public static int i_type$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_type$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_type$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_type$VH().set(addr, x);
        }
        public static void i_type$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_type$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_priority$VH() {
            return vlc_h$constants.i_priority$VH();
        }
        public static int i_priority$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_priority$VH().get(addr);
        }
        public static int i_priority$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_priority$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_priority$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_priority$VH().set(addr, x);
        }
        public static void i_priority$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_priority$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_track_description_t {

        private Clibvlc_track_description_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_track_description_t$LAYOUT();
        }
        public static VarHandle i_id$VH() {
            return vlc_h$constants.i_id$VH();
        }
        public static int i_id$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_id$VH().get(addr);
        }
        public static int i_id$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_id$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_id$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_id$VH().set(addr, x);
        }
        public static void i_id$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_id$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_title_description_t {

        private Clibvlc_title_description_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_title_description_t$LAYOUT();
        }
        public static VarHandle i_duration$VH() {
            return vlc_h$constants.i_duration$VH();
        }
        public static long i_duration$get(MemoryAddress addr) {
            return (long)vlc_h$constants.i_duration$VH().get(addr);
        }
        public static long i_duration$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants.i_duration$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_duration$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants.i_duration$VH().set(addr, x);
        }
        public static void i_duration$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants.i_duration$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_flags$VH() {
            return vlc_h$constants.i_flags$VH();
        }
        public static int i_flags$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_flags$VH().get(addr);
        }
        public static int i_flags$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_flags$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_flags$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_flags$VH().set(addr, x);
        }
        public static void i_flags$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_flags$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_chapter_description_t {

        private Clibvlc_chapter_description_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_chapter_description_t$LAYOUT();
        }
        public static VarHandle i_time_offset$VH() {
            return vlc_h$constants.i_time_offset$VH();
        }
        public static long i_time_offset$get(MemoryAddress addr) {
            return (long)vlc_h$constants.i_time_offset$VH().get(addr);
        }
        public static long i_time_offset$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants.i_time_offset$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_time_offset$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants.i_time_offset$VH().set(addr, x);
        }
        public static void i_time_offset$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants.i_time_offset$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static VarHandle i_duration$VH() {
            return vlc_h$constants.i_duration$VH();
        }
        public static long i_duration$get(MemoryAddress addr) {
            return (long)vlc_h$constants.i_duration$VH().get(addr);
        }
        public static long i_duration$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (long)vlc_h$constants.i_duration$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_duration$set(jdk.incubator.foreign.MemoryAddress addr, long x) {
            vlc_h$constants.i_duration$VH().set(addr, x);
        }
        public static void i_duration$set(jdk.incubator.foreign.MemoryAddress addr, long index, long x) {
            vlc_h$constants.i_duration$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_audio_output_t {

        private Clibvlc_audio_output_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_audio_output_t$LAYOUT();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_audio_output_device_t {

        private Clibvlc_audio_output_device_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_audio_output_device_t$LAYOUT();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_media_discoverer_description_t {

        private Clibvlc_media_discoverer_description_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_media_discoverer_description_t$LAYOUT();
        }
        public static VarHandle i_cat$VH() {
            return vlc_h$constants.i_cat$VH();
        }
        public static int i_cat$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_cat$VH().get(addr);
        }
        public static int i_cat$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_cat$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_cat$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_cat$VH().set(addr, x);
        }
        public static void i_cat$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_cat$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_event_t {

        private Clibvlc_event_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_event_t$LAYOUT();
        }
        public static VarHandle type$VH() {
            return vlc_h$constants.type$VH();
        }
        public static int type$get(MemoryAddress addr) {
            return (int)vlc_h$constants.type$VH().get(addr);
        }
        public static int type$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.type$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void type$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.type$VH().set(addr, x);
        }
        public static void type$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.type$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static MemoryAddress u$addr(MemoryAddress addr) {
            return addr.segment().asSlice(16, 16).baseAddress();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_dialog_cbs {

        private Clibvlc_dialog_cbs() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_dialog_cbs$LAYOUT();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

    public static class Clibvlc_log_message_t {

        private Clibvlc_log_message_t() {}
        public static MemoryLayout $LAYOUT() {
            return vlc_h$constants.Clibvlc_log_message_t$LAYOUT();
        }
        public static VarHandle i_severity$VH() {
            return vlc_h$constants.i_severity$VH();
        }
        public static int i_severity$get(MemoryAddress addr) {
            return (int)vlc_h$constants.i_severity$VH().get(addr);
        }
        public static int i_severity$get(jdk.incubator.foreign.MemoryAddress addr, long index) {
            return (int)vlc_h$constants.i_severity$VH().get(addr.addOffset(index*sizeof()));
        }
        public static void i_severity$set(jdk.incubator.foreign.MemoryAddress addr, int x) {
            vlc_h$constants.i_severity$VH().set(addr, x);
        }
        public static void i_severity$set(jdk.incubator.foreign.MemoryAddress addr, long index, int x) {
            vlc_h$constants.i_severity$VH().set(addr.addOffset(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));}
        public static MemoryAddress allocateArray(int len, NativeAllocationScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));}
    }

}


